%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 578.000000 810.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G87) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 578 810
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 578 810
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CenturyGothic-Bold
%!FontType1-1.0: CenturyGothic-Bold 1.0000.2.3500
14 dict begin/FontName /CenturyGothic-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /b put
dup 34 /a put
dup 35 /c put
dup 36 /k put
dup 37 /w put
dup 38 /r put
dup 39 /d put
dup 40 /space put
dup 41 /p put
dup 42 /s put
dup 43 /f put
dup 44 /o put
dup 45 /one put
dup 46 /e put
dup 47 /h put
dup 48 /equal put
dup 49 /plus put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -235 1 index div -628 2 index div 2580 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<



3C4D10FD3CE4003FED3F3F3FED1139111239313001211121350E012322003534003332161705220615141633323635342603AE0110FEF050A15ED3FECC012AD562AC49FEE17FA8AB7D81AAAA0440FBC0734C430147F3FC01424A4A68B38C8DB6B3918EB00002008AFFE404F005E40010001C004D402C361536190217151719020D170F01041000115704070F0A17570A0B1A67074A1E1481000E59100F491D707D182B4E10F43C4DFD3CE44E10F64DED003FED3F3FED3F11391112393130005D5D01113E013332001514002322262715211101220615141633323635342601994AAC62D5012AFECCD35EA250FEF1022E81AAAA817DABA805E4FDE44A4AFEBEFCF3FEB9434C7305E4FD7CB08E91B3B68D8CB300010055FFE404B3045C0018005C4017290BBF0602260227056A177A179714A714B900D6050801B80134B4045716070CB80134401B0A570F0B0D810040171D39004A1A07671240171F391249195A74182B4E10F42B4DED4E10F62B4DE4003FFDE43FFDE43130015D005D01072E0123220615141633323717062120003534122433320404B3E3407D5499BDB694B766D7AFFEC1FEE1FEBB9E011BAFA2010203647D4334B78F8BB07D93E30154E49E010A988100020058FFE404BE05E40010001C004740271715371502041703100D000011570D07030A1757070B1A8100035901024A1E14670A491D5A74182B4E10F44DED4E10F63C4DFD3CE4003FED3F3FED3F11391112393130005D01211121350E012322003534003332161705220615141633323635342603AE0110FEF050A15ED3FECC012AD562AC49FEE17FA8AB7D81AAAA05E4FA1C734C430147F3FC01424A4A68B38C8DB6B3918EB00000020057FFE404CD045C0013001B00964051490E01340201370F580B02260238078B158B1ACB15CB1ADB15DB1A080604141B00CF01014F015F016F01034F015F0102DF01EF010201E9090F1B01081B1B0A178E1007048E0A0B5F076F077F078F070407BA012F001401B2B5134A1D1B8101B80149B50D491C5A7D182B4E10F44DFDE44E10F64DEDE45D003FED3FED12392F5E5D5EFD5D5D715D3C103C11393130005D5D5D015D01211E01333237170E0123200035340033200011252E01232207060704CCFC9313A580996EE656F0A5FF00FEBE0141F201010142FEED1B9F697256362E01D174896B6C7A750143F3F90149FEB7FEF2A35B72402865000001000800000232060000170079401D043009103909000B8E0506011217AA0011101001010000010006150A09B8018940268F119F110211E40F811459010F150115DD00402631390040181E39200030000200491891AF182B4E10F45D2B2B4DF45D3CFDF4F45DE6003F3F5D3C103C103C10FD3C3F4358B44F065F0602005D59ED11393130012B133336373E013332171526232207061507

16701680160541160123163316020216131602C016D016E016F016041657100B008119670D4A258F250106671EA78F12014F125F1202124924B8012DB17D182B4E10F45D5D4DF4ED5D4E10F64DEDE4003FFD5D71717172E45D3FFD5D71717172E45D3130015D71005D5D0107262322061514161F011E01151406232227371E0133323635342F01243534363332160324A967542E342141649E76D5B3EE8EA83081323642775CFEF8C79B6ABB03A8A966271D162520324EA26D91C2BAB7384534223F3C2E85C881B75D0000010011000006550440000C0188403505620262050217021305024A09450B023A09350B022A09240B025809570B024809470B023809370B022909260B490003860A030420B8FF76B305090820B8FF774056020C0B2001000C0C61020114020201040A0909610504140505040607080861050614050506030A0B0B610203140202030A0502030C07060604040303010100060C0B0B0909080A010C00030B0204090A060864070107B80163B71F05010564050105B8021CB71F0A0105640A010AB8021CB364020102B80163404610002000400080009000C0000600003000500070008000B000C000D000F0000970008000A0000320004000600003100030009000B000E000F00006090000010800490D93AF182B194E10F45E5D5E5D5D5D7172184DFD5DFD5D4358B46B0A7B0A02015D5972FD5D4358B46B057B0502015D5972ED5D3939123939113939123939003F3C103C103C3F3C103C103C103C103C12173987052E2B877DC4872E182B877DC4872E182B877DC4872E182B877DC42B2B2B3130015D5D5D5D71717100725D4358B2390A01005D5913211B01331B012101230B012311010BDBECA3E7DB010DFE73ADE8EFAB0440FD95026BFD9C0264FBC0026CFD94000002005F01300470053A0023002F00B3404901101111000A191A1A09071C1B1B08132223231201071319042D221C1A0004271F12100A08040D2D230907010424041B19131104160A101C22042A241B9E239E1F119E099E0D276E1FB8022B400B0D6E2D0712921A922A5E16B80198B73100C008C0245E04B80198B330669D182B10F6EDE4E410F6EDE4E4003FFDFDED10E4E410E4E4011112173911173911121739001112173911121739111739070E103C3C070E103C3C070E103C3C070E103C3C313013372E01353436372737173E01333216173717071E01151406071707270E012322262707131416333236353426232206606734282A346A796A46944E4B8E4A697768352D2C33687769498F504F8F496957B98181B8B78181BA01A9684F844E538948687C6A31302C32677C65488D52518947687967352F2F3567020084BABB8685BBBC000100000002599AD3D997E95F0F3CF5001B080000000000A54B237E00000000B270A52AFF15FD8C0A1408F9



00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/space 1 def
/plus 2 def
/one 3 def
/equal 4 def
/a 5 def
/b 6 def
/c 7 def
/d 8 def
/e 9 def
/f 10 def
/h 11 def
/k 12 def
/o 13 def
/p 14 def
/r 15 def
/s 16 def
/w 17 def
/currency 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-235 -628 2580 2297}def
/UniqueID 4104425 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BD326F6E6A1837BE2706B92FCAA32341FE90C82594E2DAAEF640CEE7C829F74199BEB91DB6B4E7F71FD8F1D84E00228056F59CDE433C7FE322F338453EF5117ECC01CEDE8D51E7F2F7C88C4722D80A1F14A0366788F2C30E390EADC1B57830166A9146F1FD667F952B1516C970EA304F1011CFE60DB1462C8DA0AA7B9E578F84F64AB87315B661891122CBF66F7E6DA14B244300B99B9791E9F2CD20F5FBB8D8BD4A2CE72BD3567266FC1BF763A96B0423209BAF75A7E6E3C9A594EE2F3B0CC468695C20BA1520328017568E77C99323CDC47AECDD2ABE58B55D776CDF77850AD05C274B199780114E2E6C3606E81B4467965F17715002CB6C27C63FE9B268677F6BE12B45249577EBDDE1A1B60EC71DB5F8C6AEE3C66C91438CF6C144FA14566DC8D48F556BD270BC5A4A36343D13A57B1DC6121C83E2FE79179C3B4C6702DC04F09EA20DF3C8BF7267E0B68B1CD5DBD916C1F3573738B71C66597D81AA24B66563E5815120D643644F78FCC7379BF0A46C005A06326E064B83CEEB9688A087EC6C0E405BB97391FA60EE4D81E3D4719D6DA013485F0464B06C2A03448DCEDD12209E21252016F72A61F5087DAA417F263F49F5110B29CDA536F1FF2CD9119535D1311624A992DC7D8DCDD9A33C147A556F099B0E89925F0EA89A4DAC9CD8CFB7FC4CD146E9E0BAA687DBE45147A086F14D2E293568DCAEC72E45B1CE5960B8678436F38E7F1A82F53B1800273B24D80225A43BCD45442EF771FE38CF4CB3D5
11324B719077F9B2EAD16F3FCA172E8AA012B10CE17A47BF713D3EDAECD7CF9D132FD3D8709841031C6ADF2BE3F01B114356F8107153746128E6F01949D996A53D27D78B82D9B573C4F797A0441C02A64A46818438269FE8DA5082304D9B68B38C214F05115B7C140F3570A00D649B80A6EEC0BE5FD77437AA7C9D6F15203A03F70690B9B0EF5430C50D51205AB0D6A1C1BD518F70A378C767F18FEE2B616EED0223FD9DF66568CD438AD3D98AC25415D611E304E7831DE3942A81211701D8C0A6536405B2CE654AE914369137FCB85E580B82CB60C7FFFE624CFBD2533DD29AFA365258968C56D7E736F898B12C42AF2DEA0743C65C3FAC4716021C74E8A4CD9434F02778D23236F79D35F1199F3EE6A9C7F3E1FB2F402686F2FC02D83279665AAEB12B6C6AE58E2E1A2FB74B7B8993DCBE1FF2413EF384FAF8A7908AEC194A4A74A29A580682FA954CFA1E4FFD4A2BA64E5C614B32CD0513301833FDF1772109583FBC97F73F50B7A7E3CCD3B17F95AD075FEB06CF48C5FA2B889AA3E926A31200AF2B682BD2EDA75943459A9CBE2E99824E3CCC3380EC8DDF85AAA389C55AC7EB4DC5DC9161B8311D090AEA495B7D5867448B97D72C5B1EFA9ED9F442967FEAFE4A21C687F40C6598B9696E035767301814A75C25D14A86AF210D7E13631C514ABAE622D8B227783536DAEED28B2F6DF1E2479CD7719EC0153B0CFF96BEEB9487EFC5AF080E7EB7BB83E0B8AA98AF9FF2A27D4739CCE79C27A89C96B05450866735EB57DF49F4F6C583A163BCF937DB68855E4FE4A28A5066360C3BFD77FD8FCF5E3926A1B881F95AF4D41E7F1432CDEB00A7AAE037B23D8720C773A77E699947F71727A2EFC13BF3FE8722EA51C7DFF69118BA4257CEE16ABEB0E6BBB86723EA495BC7C58546402110BA0C37F0F62F1177652BD8BC005702ED79EF9E0363D013682934AF215B561F3CE77F0B9FCCB2F7F452BB35AF5D0F6DA77DD66D57B00A62BEFAE3ECEF8536E981C9A7E269794766857D8DA349E071E6317183978817816F220C6A634044584452EEF83579DB72F78F2873F71D235467C56D7696E946B306DB3C69A370437E3906AE33EA67E5722BA332823A40A27D63F4FC208AB881B4889EA90EC70F7EDD0313BB98EE12BE1A501EC66385C2B8A92E26C1368C57D8FAF14CEA4CF4D669904845C660CB3B9A1D56B22F264D1A72B541D7D80E83AACF0BD5D9570C6FD32B9B2163CC0ECCC0EFC68EF18D805CEFDA875E08D404D548BECFA1AB53D388D468175EC3E36CCC68A1594E7E33495A952778464E9907ED654A9BA7B1F000EF0E443532272E53275DBFD9D72BAAF7557A0D20EF9139EA258D2808ADD628A487CDDB5A9203646D7426974ADC4D9ABEB442036D3EEF60BFD66219F1A109AD8DCAC72E34E4EA7435EA9952B861E72D6C5D95D3CAF62696010BF421

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CenturyGothic-Bold cguidfix
/F1.1/CenturyGothic-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
4 w
1 J
1 j
0.60000002 i
/Cs1 SC
0.23099217 0 0.59710979 sc
q
0 0 578 810 rc
1 0 0 -1 -337 758 cm
842.21124 490.89761 m
709.37903 414.17557 l
S
837.52191 508.42438 m
714.0683 508.42438 l
S
842.4389 526.33893 m
709.15137 605.62201 l
S
652.03656 374.31747 m
570.90002 307.2045 l
S
644 396.64877 m
578.93658 396.64877 l
S
650.71185 644.16644 m
572.22473 701.336 l
S
644 508.42438 m
578.93658 508.42438 l
S
5 w
0.31568959 0 0.66145158 sc
380.40976 89.68293 m
822.18231 89.486603 l
849.79651 89.474327 872.19226 111.85014 872.20453 139.46437 c
872.20453 139.48232 872.20453 139.50026 872.20453 139.5182 c
872.19708 151.26317 l
872.17963 178.86525 849.79865 201.23184 822.19653 201.23155 c
380.76086 201.22693 l
S
0.31569001 0 0.661452 sc
705.83124 73 m
730.44171 89.427147 l
705.72681 106.40022 l
S
533.47876 218.15865 m
508.86829 201.73149 l
533.58313 184.75844 l
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
560.32898 274.34845 m
574.01068 260.66678 574.01068 238.48444 560.32898 224.80275 c
546.64728 211.121 524.4649 211.121 510.78323 224.80275 c
497.1015 238.48444 497.1015 260.66678 510.78323 274.34845 c
524.4649 288.03021 546.64728 288.03021 560.32898 274.34845 c
f
1 w
0.60000002 i
0.2087032 0 0.42711708 sc
1 0 0 -1 -337 758 cm
897.32898 483.65155 m
911.01068 497.33322 911.01068 519.51556 897.32898 533.19727 c
883.64728 546.87897 861.4649 546.87897 847.78326 533.19727 c
834.1015 519.51556 834.1015 497.33322 847.78326 483.65155 c
861.4649 469.96979 883.64728 469.96979 897.32898 483.65155 c
S
0 i
0.92429 0.86820298 0.64427698 sc
CM
366.80701 386.12408 m
380.48874 372.44241 380.48874 350.26004 366.80701 336.57837 c
353.12534 322.89661 330.94296 322.89661 317.26129 336.57837 c
303.57956 350.26004 303.57956 372.44241 317.26129 386.12408 c
330.94296 399.80582 353.12534 399.80582 366.80701 386.12408 c
f
0.60000002 i
0.208703 0 0.42711699 sc
1 0 0 -1 -337 758 cm
703.80701 371.87592 m
717.48877 385.55759 717.48877 407.73996 703.80701 421.42163 c
690.12531 435.10339 667.94299 435.10339 654.26129 421.42163 c
640.57953 407.73996 640.57953 385.55759 654.26129 371.87592 c
667.94299 358.19418 690.12531 358.19418 703.80701 371.87592 c
S
0 i
0.92429 0.86820298 0.64427698 sc
CM
366.80701 274.34845 m
380.48874 260.66678 380.48874 238.48444 366.80701 224.80275 c
353.12534 211.121 330.94296 211.121 317.26129 224.80275 c
303.57956 238.48444 303.57956 260.66678 317.26129 274.34845 c
330.94296 288.03021 353.12534 288.03021 366.80701 274.34845 c
f
0.60000002 i
0.208703 0 0.42711699 sc
1 0 0 -1 -337 758 cm
703.80701 483.65155 m
717.48877 497.33322 717.48877 519.51556 703.80701 533.19727 c
690.12531 546.87897 667.94299 546.87897 654.26129 533.19727 c
640.57953 519.51556 640.57953 497.33322 654.26129 483.65155 c
667.94299 469.96979 690.12531 469.96979 703.80701 483.65155 c
S
0 i
0.92429 0.86820298 0.64427698 sc
CM
366.80701 159.23627 m
380.48874 145.5546 380.48874 123.37224 366.80701 109.69056 c
353.12534 96.008812 330.94296 96.008812 317.26129 109.69056 c
303.57956 123.37224 303.57956 145.5546 317.26129 159.23627 c
330.94296 172.91801 353.12534 172.91801 366.80701 159.23627 c
f
0.60000002 i
0.208703 0 0.42711699 sc
1 0 0 -1 -337 758 cm
703.80701 598.76373 m
717.48877 612.44543 717.48877 634.62775 703.80701 648.30945 c
690.12531 661.99121 667.94299 661.99121 654.26129 648.30945 c
640.57953 634.62775 640.57953 612.44543 654.26129 598.76373 c
667.94299 585.08197 690.12531 585.08197 703.80701 598.76373 c
S
0 i
0.92429 0.86820298 0.64427698 sc
CM
231.67529 497.89969 m
245.35704 484.21802 245.35704 462.03564 231.67529 448.35397 c
217.99362 434.67224 195.81126 434.67224 182.12958 448.35397 c
168.44785 462.03564 168.44785 484.21802 182.12958 497.89969 c
195.81126 511.58142 217.99362 511.58142 231.67529 497.89969 c
f
0.60000002 i
0.208703 0 0.42711699 sc
1 0 0 -1 -337 758 cm
568.67529 260.10031 m
582.35706 273.78198 582.35706 295.96436 568.67529 309.64603 c
554.99359 323.32776 532.81128 323.32776 519.12958 309.64603 c
505.44785 295.96436 505.44785 273.78198 519.12958 260.10031 c
532.81128 246.41856 554.99359 246.41856 568.67529 260.10031 c
S
0 i
0.92429 0.86820298 0.64427698 sc
CM
231.67529 386.12408 m
245.35704 372.44241 245.35704 350.26004 231.67529 336.57837 c
217.99362 322.89661 195.81126 322.89661 182.12958 336.57837 c
168.44785 350.26004 168.44785 372.44241 182.12958 386.12408 c
195.81126 399.80582 217.99362 399.80582 231.67529 386.12408 c
f
0.60000002 i
0.208703 0 0.42711699 sc
1 0 0 -1 -337 758 cm
568.67529 371.87592 m
582.35706 385.55759 582.35706 407.73996 568.67529 421.42163 c
554.99359 435.10339 532.81128 435.10339 519.12958 421.42163 c
505.44785 407.73996 505.44785 385.55759 519.12958 371.87592 c
532.81128 358.19418 554.99359 358.19418 568.67529 371.87592 c
S
0 i
0.92429 0.86820298 0.64427698 sc
CM
231.67529 274.34845 m
245.35704 260.66678 245.35704 238.48444 231.67529 224.80275 c
217.99362 211.121 195.81126 211.121 182.12958 224.80275 c
168.44785 238.48444 168.44785 260.66678 182.12958 274.34845 c
195.81126 288.03021 217.99362 288.03021 231.67529 274.34845 c
f
0.60000002 i
0.208703 0 0.42711699 sc
1 0 0 -1 -337 758 cm
568.67529 483.65155 m
582.35706 497.33322 582.35706 519.51556 568.67529 533.19727 c
554.99359 546.87897 532.81128 546.87897 519.12958 533.19727 c
505.44785 519.51556 505.44785 497.33322 519.12958 483.65155 c
532.81128 469.96979 554.99359 469.96979 568.67529 483.65155 c
S
0 i
0.92429 0.86820298 0.64427698 sc
CM
231.67529 60.807003 m
245.35704 47.125328 245.35704 24.942966 231.67529 11.261292 c
217.99362 -2.4204538 195.81126 -2.4204538 182.12958 11.261292 c
168.44785 24.942966 168.44785 47.125328 182.12958 60.807003 c
195.81126 74.488747 217.99362 74.488747 231.67529 60.807003 c
f
0.60000002 i
0.208703 0 0.42711699 sc
1 0 0 -1 -337 758 cm
568.67529 697.19299 m
582.35706 710.87469 582.35706 733.05701 568.67529 746.73871 c
554.99359 760.42047 532.81128 760.42047 519.12958 746.73871 c
505.44785 733.05701 505.44785 710.87469 519.12958 697.19299 c
532.81128 683.51123 554.99359 683.51123 568.67529 697.19299 c
S
0.18119 0 0.44264001 sc
0 i
/F1.1[ 32 0 0 -32 0 0]sf
548.2381 190.41417 m
(!"#$%"&'\(\)"**)[ 21.125000 21.125000 20.484375 18.562500 25.593750 21.125000 10.234375 21.125000 8.953125 21.125000 21.125000 14.078125 0.000000 ] xS
491 77.486595 m
(+,&%"&'\(\)"**)[ 8.953125 20.484375 10.234375 25.593750 21.125000 10.234375 21.125000 8.953125 21.125000 21.125000 14.078125 0.000000 ] xS
/F1.1[ 40 0 0 -40 0 0]sf
342.70361 -7 m
(-\(.\),#/0\(-+%'\(1\(-\(!"#$%"&')[ 22.402344 11.191406 25.605469 26.406250 25.605469 25.605469 24.003906 24.003906 11.191406 22.402344 11.191406 31.992188 26.406250 11.191406 24.003906 11.191406 22.402344 11.191406 26.406250 26.406250 25.605469 23.203125 31.992188 26.406250 12.792969 0.000000 ] xS
ep
end
%%Trailer
%%EOF
