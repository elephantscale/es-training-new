%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 867.000000 486.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G87) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 867 486
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 867 486
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CenturyGothic-Bold
%!FontType1-1.0: CenturyGothic-Bold 1.0000.2.3500
14 dict begin/FontName /CenturyGothic-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /b put
dup 34 /a put
dup 35 /c put
dup 36 /k put
dup 37 /w put
dup 38 /r put
dup 39 /d put
dup 40 /space put
dup 41 /p put
dup 42 /s put
dup 43 /j put
dup 44 /u put
dup 45 /t put
dup 46 /m put
dup 47 /e put
dup 48 /o put
dup 49 /i put
dup 50 /g put
dup 51 /h put
dup 52 /equal put
dup 53 /hyphen put
dup 54 /five put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -235 1 index div -628 2 index div 2580 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<










00>] def
/CharStrings 24 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/five 3 def
/equal 4 def
/a 5 def
/b 6 def
/c 7 def
/d 8 def
/e 9 def
/g 10 def
/h 11 def
/i 12 def
/j 13 def
/k 14 def
/m 15 def
/o 16 def
/p 17 def
/r 18 def
/s 19 def
/t 20 def
/u 21 def
/w 22 def
/currency 23 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-235 -628 2580 2297}def
/UniqueID 4104425 def
currentdict currentfile eexec

24C59E8D53CFD77D9F8B71C9B23280D19939459CA855C4884EB46D473551C0BF928826C1739C88BF9551EA01B87599E3C2506C5D796A2E97A37F92C08C36DD32E54B118052489109EE4379D59A6544E188B9E3AC393019E5326ABCF8CF1188A0326F24D64B83A206A20AFE6AE90714B191787C1C80D98BDA90B197309132F24AA306535D807FAF232C63FDD00FEDFE2A97E2FFAEB3A6D8A2A4EDE5C34297B128A9D46D72F10E2F2958E64357B6DE02ACF0F6B8081A1A29B4C2F2D9CEEE2075AC984EBC91EB992F9876F8009C0BDB2A33B5E9ECEE2ED9F0C005179E571323F1A9D96F00E08442DD923F2BDE2E789BF98A51BC84512A7DC0C63E59A560355C6D61A10C9F4B81DC60393B772D121295033AD53C017AA1521D2D11577AE2775551B96976A95530CC8222327FC83FD51ACF6523465F2AE0933F706D25895C3BEE33EC97D569C0F87D7C73FB6C08BAB67829705A96FED3C9D41BB85F86F8484566E6C70CB61393BADBF6A197025617108A9048A5B18AA3182D710B4DBAC5BF022ACD0A6B77A28718E1EDA518D0DC000245FB535B1D7CEF096E0D6920AB3A261630461F8783F28FE4B58CDA211204F14E9F85EE86084E8C7E28D57C7752F052B8C9654C127048F04436F9D20C3A547D11218A95C08183DE442AAA011514DB18C8097A050FD1C6877E4E32A3923735CE309B2E2C5349914E9656556997F64D487E3D72BB274736987D85E5960B4ABD06FD504CDB2F6FF20090D42AB9359C4FC99A8E6A31D0143BEC87771CD6706FEF12B516FC1AAAEB0071FA889A8B2A64BF30C2B14EB161504CF79A352CE296E38D5A875633DCBED8FA02BC2EC6213F458EEA1BEBB858D327F818D2E177D6A4EDE975B5C83D0A90B1B1EC2DC9E2D5A41A85F9FF7331887DC7D75647FD77E107919478FD931C8B4624E7BF752D3458EC760133A0E4F51B8FB83952E44FAB1A479AA5D14FF75F4CE6277BA99F19C71E8CB849B1B84B31FDEDF5B3F353E7180CD8A664E46403BD203BEDA955375C6F144DB2E272C6FB83592333A55D1CC69F0D2B83CD6E337F7BA9749C71260BE1C87B39F1A96F8338ADC8BDA534053AEC4BB84C57AD8F1C448D5B791986CE716F3AD4EAEF89D52833076DD2174E95DF059335964D26AF293493FE4A446BA9EC9FB1204380F20B24C40B7E9386979C7A8C84823486B53CE88A1EB9DB50EA507FC944BB45963CEC4FD852C405D2F981CA022CB8958C38E2F13F45A5987317487461A363A116809632B8F2F6EB6BD97523EEDA3EE26DD169A7B40B5C2285C2E8EC05AB44FF44F93B4D13F7AAAA0DF983A24FAC4D7600147B184217DC605A38935510BE152B647872EFF375A45F2CD5DD4CB6C4D5AF872015CA34EA9E668FFEAF46A77EE9298B0DC23807CBB36CD59C8E08A06191AA27992C3BFBF4A4D8505D8CE83C872BF5E658BE67CDC50C


0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CenturyGothic-Bold cguidfix
/F1.1/CenturyGothic-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
4 w
1 J
1 j
0.60000002 i
/Cs1 SC
0.1854682 0 0.58296227 sc
q
0 0 867 486 rc
1 0 0 -1 -165 637 cm
226.18611 181.54349 m
261.92111 181.54349 l
S
321.92239 181.54349 m
357.65741 181.54349 l
S
417.65869 181.54349 m
453.39371 181.54349 l
S
513.39496 181.54349 m
549.13 181.54349 l
S
5 w
0.62458271 0.18088205 0.13108672 sc
624.52136 206.72601 m
648.62646 220.09938 l
S
0 i
CM
446.92941 437.25992 m
456.90164 425.55203 l
462.14108 434.99597 l
h
446.92941 437.25992 m
f
0 J
0 j
1 0 0 -1 -165 637 cm
611.92944 199.74007 m
621.90161 211.44798 l
627.14105 202.00403 l
h
611.92944 199.74007 m
S
1 J
1 j
0.60000002 i
719.63312 260.93329 m
739.47809 272.58139 l
S
0 i
CM
542.21436 383.35602 m
551.89966 371.40967 l
557.36664 380.72379 l
h
542.21436 383.35602 m
f
0 J
0 j
1 0 0 -1 -165 637 cm
707.21436 253.64398 m
716.89966 265.59033 l
722.36664 256.27621 l
h
707.21436 253.64398 m
S
1 J
1 j
0.60000002 i
719.63312 314.60959 m
739.47809 302.96146 l
S
0 i
CM
542.21436 315.10114 m
557.36664 317.73337 l
551.89966 327.04745 l
h
542.21436 315.10114 m
f
0 J
0 j
1 0 0 -1 -165 637 cm
707.21436 321.89886 m
722.36664 319.26663 l
716.89966 309.95255 l
h
707.21436 321.89886 m
S
4 w
1 J
1 j
0.60000002 i
0.1854682 0 0.58296227 sc
605.37109 379.44128 m
648.62646 355.44348 l
S
513.39496 393.99936 m
549.13 393.99936 l
S
417.65869 393.99936 m
453.39371 393.99936 l
S
321.92239 393.99936 m
357.65741 393.99936 l
S
226.18611 393.99936 m
261.92111 393.99936 l
S
216.27048 371.71326 m
271.83673 310.05756 l
S
208.51402 366.64008 m
279.59317 208.90279 l
S
226.18611 287.77142 m
261.92111 287.77142 l
S
321.92239 287.77142 m
357.65741 287.77142 l
S
417.65869 287.77142 m
453.39371 287.77142 l
S
513.39496 287.77142 m
549.13 287.77142 l
S
5 w
0.62458271 0.18088205 0.13108672 sc
605.86383 349.50507 m
659.41254 260.37949 l
S
0 i
CM
433.44763 275.15152 m
445.49261 284.71387 l
436.23508 290.27603 l
h
433.44763 275.15152 m
f
0 J
0 j
1 0 0 -1 -165 637 cm
598.44763 361.84848 m
610.49261 352.28613 l
601.23505 346.72397 l
h
598.44763 361.84848 m
S
1 J
1 j
0.60000002 i
624.52136 262.5889 m
648.62646 249.21553 l
S
0 i
CM
446.92941 367.42517 m
462.14108 369.68912 l
456.90164 379.13306 l
h
446.92941 367.42517 m
f
0 J
0 j
1 0 0 -1 -165 637 cm
611.92944 269.57483 m
627.14105 267.31088 l
621.90161 257.86694 l
h
611.92944 269.57483 m
S
4 w
1 J
1 j
0.60000002 i
0.1854682 0 0.58296227 sc
594.58502 207.26552 m
659.41254 315.16336 l
S
605.37109 302.3295 m
648.62646 326.32733 l
S
503.47937 265.48532 m
559.04559 203.82961 l
S
495.7229 366.64008 m
566.80206 208.90279 l
S
559.04559 371.71326 m
503.47937 310.05756 l
S
566.80206 366.64008 m
495.7229 208.90279 l
S
407.74307 310.05756 m
463.30933 371.71326 l
S
399.9866 208.90279 m
471.06577 366.64008 l
S
407.74307 265.48532 m
463.30933 203.82961 l
S
399.9866 366.64008 m
471.06577 208.90279 l
S
312.00677 310.05756 m
367.57303 371.71326 l
S
304.25034 208.90279 m
375.32947 366.64008 l
S
312.00677 265.48532 m
367.57303 203.82961 l
S
304.25034 366.64008 m
375.32947 208.90279 l
S
216.27048 265.48532 m
271.83673 203.82961 l
S
271.83673 265.48532 m
216.27048 203.82961 l
S
279.59317 366.64008 m
208.51402 208.90279 l
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
52.399086 476.67014 m
64.115112 464.95416 64.115112 445.95886 52.399086 434.24289 c
40.683121 422.52686 21.687801 422.52686 9.9718351 434.24289 c
-1.7441907 445.95886 -1.7441907 464.95416 9.9718351 476.67014 c
21.687801 488.38617 40.683121 488.38617 52.399086 476.67014 c
f
1 w
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
217.39908 160.32986 m
229.11511 172.04582 229.11511 191.04115 217.39908 202.75711 c
205.68312 214.47314 186.68781 214.47314 174.97183 202.75711 c
163.25581 191.04115 163.25581 172.04582 174.97183 160.32986 c
186.68781 148.61383 205.68312 148.61383 217.39908 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
52.399086 370.4422 m
64.115112 358.72623 64.115112 339.73093 52.399086 328.01495 c
40.683121 316.29892 21.687801 316.29892 9.9718351 328.01495 c
-1.7441907 339.73093 -1.7441907 358.72623 9.9718351 370.4422 c
21.687801 382.15823 40.683121 382.15823 52.399086 370.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
217.39908 266.5578 m
229.11511 278.27377 229.11511 297.26907 217.39908 308.98505 c
205.68312 320.70108 186.68781 320.70108 174.97183 308.98505 c
163.25581 297.26907 163.25581 278.27377 174.97183 266.5578 c
186.68781 254.84178 205.68312 254.84178 217.39908 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
52.399086 264.21426 m
64.115112 252.49829 64.115112 233.50298 52.399086 221.787 c
40.683121 210.07098 21.687801 210.07098 9.9718351 221.787 c
-1.7441907 233.50298 -1.7441907 252.49829 9.9718351 264.21426 c
21.687801 275.93027 40.683121 275.93027 52.399086 264.21426 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
217.39908 372.78574 m
229.11511 384.50171 229.11511 403.49704 217.39908 415.21298 c
205.68312 426.92902 186.68781 426.92902 174.97183 415.21298 c
163.25581 403.49704 163.25581 384.50171 174.97183 372.78574 c
186.68781 361.06973 205.68312 361.06973 217.39908 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
148.13538 476.67014 m
159.85141 464.95416 159.85141 445.95886 148.13538 434.24289 c
136.41942 422.52686 117.4241 422.52686 105.70813 434.24289 c
93.992104 445.95886 93.992104 464.95416 105.70813 476.67014 c
117.4241 488.38617 136.41942 488.38617 148.13538 476.67014 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
313.13538 160.32986 m
324.85141 172.04582 324.85141 191.04115 313.13538 202.75711 c
301.4194 214.47314 282.4241 214.47314 270.70813 202.75711 c
258.9921 191.04115 258.9921 172.04582 270.70813 160.32986 c
282.4241 148.61383 301.4194 148.61383 313.13538 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
148.13538 370.4422 m
159.85141 358.72623 159.85141 339.73093 148.13538 328.01495 c
136.41942 316.29892 117.4241 316.29892 105.70813 328.01495 c
93.992104 339.73093 93.992104 358.72623 105.70813 370.4422 c
117.4241 382.15823 136.41942 382.15823 148.13538 370.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
313.13538 266.5578 m
324.85141 278.27377 324.85141 297.26907 313.13538 308.98505 c
301.4194 320.70108 282.4241 320.70108 270.70813 308.98505 c
258.9921 297.26907 258.9921 278.27377 270.70813 266.5578 c
282.4241 254.84178 301.4194 254.84178 313.13538 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
148.13538 264.21426 m
159.85141 252.49829 159.85141 233.50298 148.13538 221.787 c
136.41942 210.07098 117.4241 210.07098 105.70813 221.787 c
93.992104 233.50298 93.992104 252.49829 105.70813 264.21426 c
117.4241 275.93027 136.41942 275.93027 148.13538 264.21426 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
313.13538 372.78574 m
324.85141 384.50171 324.85141 403.49704 313.13538 415.21298 c
301.4194 426.92902 282.4241 426.92902 270.70813 415.21298 c
258.9921 403.49704 258.9921 384.50171 270.70813 372.78574 c
282.4241 361.06973 301.4194 361.06973 313.13538 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
243.87167 476.67014 m
255.58769 464.95416 255.58769 445.95886 243.87167 434.24289 c
232.1557 422.52686 213.16039 422.52686 201.44443 434.24289 c
189.72839 445.95886 189.72839 464.95416 201.44443 476.67014 c
213.16039 488.38617 232.1557 488.38617 243.87167 476.67014 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
408.87167 160.32986 m
420.58771 172.04582 420.58771 191.04115 408.87167 202.75711 c
397.1557 214.47314 378.1604 214.47314 366.44443 202.75711 c
354.72839 191.04115 354.72839 172.04582 366.44443 160.32986 c
378.1604 148.61383 397.1557 148.61383 408.87167 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
243.87167 370.4422 m
255.58769 358.72623 255.58769 339.73093 243.87167 328.01495 c
232.1557 316.29892 213.16039 316.29892 201.44443 328.01495 c
189.72839 339.73093 189.72839 358.72623 201.44443 370.4422 c
213.16039 382.15823 232.1557 382.15823 243.87167 370.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
408.87167 266.5578 m
420.58771 278.27377 420.58771 297.26907 408.87167 308.98505 c
397.1557 320.70108 378.1604 320.70108 366.44443 308.98505 c
354.72839 297.26907 354.72839 278.27377 366.44443 266.5578 c
378.1604 254.84178 397.1557 254.84178 408.87167 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
243.87167 264.21426 m
255.58769 252.49829 255.58769 233.50298 243.87167 221.787 c
232.1557 210.07098 213.16039 210.07098 201.44443 221.787 c
189.72839 233.50298 189.72839 252.49829 201.44443 264.21426 c
213.16039 275.93027 232.1557 275.93027 243.87167 264.21426 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
408.87167 372.78574 m
420.58771 384.50171 420.58771 403.49704 408.87167 415.21298 c
397.1557 426.92902 378.1604 426.92902 366.44443 415.21298 c
354.72839 403.49704 354.72839 384.50171 366.44443 372.78574 c
378.1604 361.06973 397.1557 361.06973 408.87167 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
339.60797 476.67014 m
351.32401 464.95416 351.32401 445.95886 339.60797 434.24289 c
327.892 422.52686 308.89667 422.52686 297.18073 434.24289 c
285.46469 445.95886 285.46469 464.95416 297.18073 476.67014 c
308.89667 488.38617 327.892 488.38617 339.60797 476.67014 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
504.60797 160.32986 m
516.32397 172.04582 516.32397 191.04115 504.60797 202.75711 c
492.892 214.47314 473.89667 214.47314 462.18073 202.75711 c
450.46469 191.04115 450.46469 172.04582 462.18073 160.32986 c
473.89667 148.61383 492.892 148.61383 504.60797 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
339.60797 370.4422 m
351.32401 358.72623 351.32401 339.73093 339.60797 328.01495 c
327.892 316.29892 308.89667 316.29892 297.18073 328.01495 c
285.46469 339.73093 285.46469 358.72623 297.18073 370.4422 c
308.89667 382.15823 327.892 382.15823 339.60797 370.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
504.60797 266.5578 m
516.32397 278.27377 516.32397 297.26907 504.60797 308.98505 c
492.892 320.70108 473.89667 320.70108 462.18073 308.98505 c
450.46469 297.26907 450.46469 278.27377 462.18073 266.5578 c
473.89667 254.84178 492.892 254.84178 504.60797 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
339.60797 264.21426 m
351.32401 252.49829 351.32401 233.50298 339.60797 221.787 c
327.892 210.07098 308.89667 210.07098 297.18073 221.787 c
285.46469 233.50298 285.46469 252.49829 297.18073 264.21426 c
308.89667 275.93027 327.892 275.93027 339.60797 264.21426 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
504.60797 372.78574 m
516.32397 384.50171 516.32397 403.49704 504.60797 415.21298 c
492.892 426.92902 473.89667 426.92902 462.18073 415.21298 c
450.46469 403.49704 450.46469 384.50171 462.18073 372.78574 c
473.89667 361.06973 492.892 361.06973 504.60797 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
435.34427 476.67014 m
447.06027 464.95416 447.06027 445.95886 435.34427 434.24289 c
423.6283 422.52686 404.63297 422.52686 392.91702 434.24289 c
381.20099 445.95886 381.20099 464.95416 392.91702 476.67014 c
404.63297 488.38617 423.6283 488.38617 435.34427 476.67014 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
600.34424 160.32986 m
612.0603 172.04582 612.0603 191.04115 600.34424 202.75711 c
588.6283 214.47314 569.633 214.47314 557.91699 202.75711 c
546.20099 191.04115 546.20099 172.04582 557.91699 160.32986 c
569.633 148.61383 588.6283 148.61383 600.34424 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
435.34427 370.4422 m
447.06027 358.72623 447.06027 339.73093 435.34427 328.01495 c
423.6283 316.29892 404.63297 316.29892 392.91702 328.01495 c
381.20099 339.73093 381.20099 358.72623 392.91702 370.4422 c
404.63297 382.15823 423.6283 382.15823 435.34427 370.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
600.34424 266.5578 m
612.0603 278.27377 612.0603 297.26907 600.34424 308.98505 c
588.6283 320.70108 569.633 320.70108 557.91699 308.98505 c
546.20099 297.26907 546.20099 278.27377 557.91699 266.5578 c
569.633 254.84178 588.6283 254.84178 600.34424 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
435.34427 264.21426 m
447.06027 252.49829 447.06027 233.50298 435.34427 221.787 c
423.6283 210.07098 404.63297 210.07098 392.91702 221.787 c
381.20099 233.50298 381.20099 252.49829 392.91702 264.21426 c
404.63297 275.93027 423.6283 275.93027 435.34427 264.21426 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
600.34424 372.78574 m
612.0603 384.50171 612.0603 403.49704 600.34424 415.21298 c
588.6283 426.92902 569.633 426.92902 557.91699 415.21298 c
546.20099 403.49704 546.20099 384.50171 557.91699 372.78574 c
569.633 361.06973 588.6283 361.06973 600.34424 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
531.08057 423.55615 m
542.79657 411.84021 542.79657 392.84488 531.08057 381.12891 c
519.36456 369.4129 500.36926 369.4129 488.65329 381.12891 c
476.93729 392.84488 476.93729 411.84021 488.65329 423.55615 c
500.36926 435.27219 519.36456 435.27219 531.08057 423.55615 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
696.08057 213.44383 m
707.79657 225.15981 707.79657 244.15512 696.08057 255.87108 c
684.36456 267.5871 665.36926 267.5871 653.65332 255.87108 c
641.93726 244.15512 641.93726 225.15981 653.65332 213.44383 c
665.36926 201.72781 684.36456 201.72781 696.08057 213.44383 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
531.08057 317.32822 m
542.79657 305.61227 542.79657 286.61694 531.08057 274.90097 c
519.36456 263.18494 500.36926 263.18494 488.65329 274.90097 c
476.93729 286.61694 476.93729 305.61227 488.65329 317.32822 c
500.36926 329.04425 519.36456 329.04425 531.08057 317.32822 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
696.08057 319.67178 m
707.79657 331.38773 707.79657 350.38306 696.08057 362.09903 c
684.36456 373.81506 665.36926 373.81506 653.65332 362.09903 c
641.93726 350.38306 641.93726 331.38773 653.65332 319.67178 c
665.36926 307.95575 684.36456 307.95575 696.08057 319.67178 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
621.57104 370.4422 m
633.28705 358.72623 633.28705 339.73093 621.57104 328.01495 c
609.85504 316.29892 590.85974 316.29892 579.1438 328.01495 c
567.42773 339.73093 567.42773 358.72623 579.1438 370.4422 c
590.85974 382.15823 609.85504 382.15823 621.57104 370.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -165 637 cm
786.57104 266.5578 m
798.28705 278.27377 798.28705 297.26907 786.57104 308.98505 c
774.85504 320.70108 755.85974 320.70108 744.1438 308.98505 c
732.42773 297.26907 732.42773 278.27377 744.1438 266.5578 c
755.85974 254.84178 774.85504 254.84178 786.57104 266.5578 c
S
0 i
0.67017591 0.59128505 0.99087089 sc
CM
539.86755 173.72984 m
539.86755 178.27016 l
539.86755 178.82243 539.41986 179.27016 538.86755 179.27016 c
243.21657 179.27016 l
242.66428 179.27016 242.21657 179.71786 242.21657 180.27016 c
242.21657 194.96294 l
242.21657 195.51523 241.76884 195.96294 241.21657 195.96294 c
240.99519 195.96294 240.78008 195.88948 240.60495 195.75409 c
216.07576 176.79115 l
215.63882 176.45337 215.55844 175.82532 215.89624 175.38838 c
215.94821 175.32115 216.00854 175.26082 216.07576 175.20885 c
240.60495 156.24591 l
241.04189 155.90811 241.66992 155.98849 242.00772 156.42543 c
242.14311 156.60057 242.21657 156.81569 242.21657 157.03706 c
242.21657 171.72984 l
242.21657 172.28214 242.66428 172.72984 243.21657 172.72984 c
538.86755 172.72984 l
539.41986 172.72984 539.86755 173.17757 539.86755 173.72984 c
h
539.86755 173.72984 m
f
0.60000002 i
0.14821209 0 0.42149046 sc
1 0 0 -1 -165 637 cm
704.86755 463.27014 m
704.86755 458.72986 l
704.86755 458.17755 704.41986 457.72986 703.86755 457.72986 c
408.21655 457.72986 l
407.66428 457.72986 407.21655 457.28214 407.21655 456.72986 c
407.21655 442.03705 l
407.21655 441.48477 406.76886 441.03705 406.21655 441.03705 c
405.99518 441.03705 405.78009 441.1105 405.60495 441.24591 c
381.07578 460.20886 l
380.63882 460.54663 380.55844 461.17468 380.89624 461.61163 c
380.94821 461.67886 381.00854 461.73917 381.07578 461.79114 c
405.60495 480.75409 l
406.04187 481.09189 406.66992 481.01151 407.00772 480.57455 c
407.1431 480.39941 407.21655 480.18433 407.21655 479.96295 c
407.21655 465.27014 l
407.21655 464.71786 407.66428 464.27014 408.21655 464.27014 c
703.86755 464.27014 l
704.41986 464.27014 704.86755 463.82245 704.86755 463.27014 c
h
704.86755 463.27014 m
S
0.14619 0 0.37788999 sc
0 i
/F1.1[ 32 0 0 -32 0 0]sf
418.91443 507.22668 m
(!"#$%"&'\(\)"**)[ 21.125000 21.125000 20.484375 18.562500 25.593750 21.125000 10.234375 21.125000 8.953125 21.125000 21.125000 14.078125 0.000000 ] xS
418.91443 585.22668 m
("'+,*-\(\)"&"./-/&*)[ 21.125000 21.125000 8.312500 19.203125 14.078125 9.593750 8.953125 21.125000 21.125000 10.234375 21.125000 30.078125 20.484375 9.593750 20.484375 10.234375 0.000000 ] xS
418.91443 624.22668 m
(-0\(&/',#/\(/&&0&)[ 9.593750 20.484375 8.953125 10.234375 20.484375 21.125000 19.203125 20.484375 20.484375 8.953125 20.484375 10.234375 10.234375 20.484375 0.000000 ] xS
4 w
0.60000002 i
0.185468 0 0.58296198 sc
312.00677 371.71326 m
367.57303 310.05756 l
S
407.74307 371.71326 m
463.30933 310.05756 l
S
503.47937 371.71326 m
559.04559 310.05756 l
S
0.14619 0 0.37788999 sc
0 i
745.6026 234 m
("'+,*-\()[ 21.125000 21.125000 8.312500 19.203125 14.078125 9.593750 0.000000 ] xS
0.66713786 0.19994213 0.13912144 sc
847.99323 234 m
(%/123-*)[ 25.593750 20.484375 7.671875 21.125000 19.203125 9.593750 0.000000 ] xS
0.14619 0 0.37788999 sc
886.4151 300.27142 m
(/&&0&\(4\(56)[ 20.484375 10.234375 10.234375 20.484375 10.234375 8.953125 19.203125 8.953125 13.437500 0.000000 ] xS
745.6026 366.54285 m
("'+,*-\(\)"&"./-/&*)[ 21.125000 21.125000 8.312500 19.203125 14.078125 9.593750 8.953125 21.125000 21.125000 10.234375 21.125000 30.078125 20.484375 9.593750 20.484375 10.234375 0.000000 ] xS
ep
end
%%Trailer
%%EOF
