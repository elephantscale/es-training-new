%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1177.000000 408.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G87) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1177 408
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1177 408
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CenturyGothic-Bold
%!FontType1-1.0: CenturyGothic-Bold 1.0000.2.3500
14 dict begin/FontName /CenturyGothic-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /f put
dup 34 /o put
dup 35 /r put
dup 36 /w put
dup 37 /a put
dup 38 /d put
dup 39 /space put
dup 40 /p put
dup 41 /s put
dup 42 /e put
dup 43 /i put
dup 44 /c put
dup 45 /t put
dup 46 /n put
dup 47 /v put
dup 48 /l put
dup 49 /u put
dup 50 /equal put
dup 51 /one put
dup 52 /five put
dup 53 /x put
dup 54 /zero put
dup 55 /E put
dup 56 /hyphen put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -235 1 index div -628 2 index div 2580 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<








029A400C16CC67881116B973281FB767B80231B34316A567B804E2B394169967B8046BB386169567B8064F4009BF1694679112168F67B80328B360168273B8029AB71F6B67FF1F166167B80253B347166067B80165B32B165867BB08D5010B001601B9B26C121F411901B00057029A001F01AF0057040F0086001601AE0057035B006F001601A900570160002E001601A700570148002B001601A6B357F22016B80157B26C1B1FBC014E006C029A001F0143B357CB1B16B8011140096C1B1FF46C131FEE57B8014DB21FEC57B90A22014DB216E957B80111400D2416E757CB1B16CD57941FAA57B8022340104716A66C201F9B6C591F9A6C861F8E57B80261B34F16886CB8029AB21F876CB804DDB394167B57B8040FB386167857B8029A400D1F460246014602551809180990B8011840500790F20790C50790AC07907707906207905F079056079055072408220820081E081C081A08180816081408120810080E080C080A0808080608040802080008004018010F1E3F1EBF1EEF1E040F00012CB901FA000101B013034B024B5342014BB0C063004B6220B0F65323B8010A515AB005234201B0124B004B544218B0382B4BB8080052B0372B4BB009505B58B101018E59B00288B801005458B80119B101018E851BB0124358B90001011F858D1BB9000101FF858D5959017300737373162B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B014B5079BC001F01620007001F0139B6071FF1071F64072B2B2B2B4B5379BC00900162000700900139B60790F1079064072B2B2B2B181DB0964B5358B0AA1D59B0324B5358B0FF1D594BB8010B53205C58B901FC01FA4544B901FB01FA45445958B908E601FC455258B901FC08E64459594BB8029A53205C58B9006501FB4544B9007301FB45445958B916910065455258B9006516914459594BB8029A53205C58B9015200654544B1656545445958B916910152455258B9015216914459594BB8040153205C58B9005901FC4544B9006701FC45445958B922200059455258B9005922204459594BB8053453205C58B172734544B1737345445958B92D7E0072455258B900722D7E445959004BB04053205C58B157574544B16C5745445958B901EC0057455258B9005701EC4459594BB04053205C58B157574544B1795745445958B901EC0057455258B9005701EC4459594BB8029A53205C58B157574544B1575745445958B9144B0057455258B90057144B44595901704BB801F35358B2462146458B44594BB803E75358B2466146458B4459B2736546456823456044704BB801F35358B2462146458B44594BB803E75358B2466146458B4459B2675946456823456044704BB801F35358B2462146458B44594BB803E75358B2466146458B4459BA007201520046456823456044002B

00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/zero 3 def
/one 4 def
/five 5 def
/equal 6 def
/E 7 def
/a 8 def
/c 9 def
/d 10 def
/e 11 def
/f 12 def
/i 13 def
/l 14 def
/n 15 def
/o 16 def
/p 17 def
/r 18 def
/s 19 def
/t 20 def
/u 21 def
/v 22 def
/w 23 def
/x 24 def
/currency 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-235 -628 2580 2297}def
/UniqueID 4104425 def
currentdict currentfile eexec

843F1561F23FF09085F2D77B6FD57F45BA95EA5EE911F9ECDEEBDA20F9E1504B7A50C0A6CE74F220C1548798E95CFB041D18FCA96BE842B635D4099873ED1240821F2190DE4A643004965A953C6621A23001A51A21BCA096D5E5F4177DECEC8615ED584E7C9522E7872BFE1A3C1E54C24E42A2FC8C61BF749C73E575FCFA5F4DD9F4B201044A6730FEB288BCE494A6FE1CC48A8EF92E4D8D482F9BF8824E5C42727B4AFBA7FC574A2B5592EE39323029BDE42420C6198F4DD422C2D866D1ADB04E4E12524C95370F5ED0FD151177AE81226AA556C7868325CACCDFF353A3AB9E817F88505DFFA776D7CF4FCC24A596B215AB908427A5C4CA5178D88558C657DB36DD5864A2F13FF915E96A8FF16428D7A02727B52D0A976A99BBD136C8A3908B1F22C66ADD3D794EEDE295F401685B95B9C831421CD9A1F755E030301BB40378C70E4AC0FC6AE7AE14868E1734623074AD8ACE4CB7D207579D1135A96AB3BC0CC52720B27A59671A19DA1605E5D0BE03F66BEF28CC21ED8B55A5993D2F17B077DF4E0D8E325030F820AC44D1848187A34DEE2287E0F796D4F582FEB8FA1536E2A21CCDF2BA0F9EA37DE769B3797A55A13935FC24949F3F1EC225CDB5028347F6AB1BD4256399C30E9E43E25CF3ACE2FA0D544898305B1C9C91F5D94B790D8AD994B04F52675CAA3FFE80CB30558143CACCC4B02D48D92221EF26AF66A0BFBAB81DE88235C817FEA9F9BC64DFE618BA773BA0AF61B5BB6526CAAC8E3AB545BF7F2B52169E90A82D520BE4DFDEC1C3E726CAFB01946458E16FE9BC1F5B1317347FE8653BE28CAEA70FD807809D056DC7A11E73F6713321A6681854A3B3B8369332F5791D9F40D018A0980F6FBB75F16A247EC88D2A2FA825D8015FE68B27DC4EEB0BA7B59C5ED7AA976985BF582E482C98B8D5B2DCBCCC5D35FFDFA2A5825D0EA8EB77F137393AF72BE684B4719727429BC10F8FEE5D94077B3F5DBB071B3B32474E21F4A2FE5F19D0B1D236B6EF0BCA77330F77D6C34B7F8B1CF699CCE444AC5967E635255F325FF07E98CC9B1561922482219A3552D851E516DE433C7D1CF40958AB6C20A076C06D52FB686183A238ED01272A5BD387AAF2248D1B84B6C53453609CD7008B8554FDAF716EF3B56428CE0803C621958EA177C55E40CA85278348AB096135EA92E9368CB38B3689C19CBF939B30CC4B0AA01AD9FC4C7167A58DE4C3F0330168D279DF4449808F7C8E2B3A69632C3F1EB889D67AAA17E4CAA51DF7F203CE16E3D183AE6E720EAFAB53952F835B3C953BD6773781170CE87AE7F9F22DDAE2838C31B6CB4F2CE9AACA6F5D178DDA208019C938C14DD226E5EA36578EA4EC4298656FC4B0B913EDA18D07D12C7C4BAB79936E0B6C84A88BFB2EEF4A7ACED4172E9D7A529A121A194B3C5239FC296A71FB9E8B2BBA36E8D22201E194E8

F02CFD19338C4525627B03671FACF76C08D9114698D34EC804FA1E71EC4D7BE4A82A377916CC60F44B068BAD4D2DEC96296D4AFA4FD4E176C4C273D620425198FDFDA2C4FCFD91D1CA9BE10B0466C9E319B2A342A6C9B4C813CE477E86EBCDD7EB19E5D85BA9CF8D969F466D140FCF9A9A304FAF155AE4EFCB74C6F94C4EFF0C2BA4AAC2350BC47D52C693568DA6645EC3BBA3510A207C3FCF53116094252FC81613ED9714E8322F0EC8FFD013C0EDA3084EA5B56B05B53385C89075A6602B5A910DC618CF05309787CD11461E793E5C7200026FD5B25EBB9643AA17E3C1A86953D167A71BFCDBCE6E2F5C8CA013509B7D3BFE63A2061AD253ABBC6475666199B5F9D477605C889633BB0808748DC5D8B9C9632162871A493990F1C8BA5D52E3096F66551471E618D7F9C2A496413155271FF3EE3EF870EDD6C634C863DE86D46FDDC4479C81C407DA420CD73E811D85413F9B75A3813D2F76B1D9231D9F294ECF6E983B13FC758793D733567FE6FF9AB6FE83C653461BEC800DD137EEBEFA77A19733801EB508E3D5BE58E6D612A0437AE3B264B1304BA0CE59060A3FD9BD01B446E07897FC7DD4DB481387D392E9C2E09170625466E8BE00D807EA5CFA17439E15F916B376B134BA415E93BC2C82705F71C9207BB339110A0764CA0BE4D35153A6C2F23C661338A71CF18D74B90D7A43D24FDF806D605FB86551D86E54B09A1EF155019EA336CB26D49BD983F76402A8D7FC0183955B49BB156906019FFC616C51F6FE382C0EBAB806ED6D3701DAD4930755CDF0D9751B7B8722897CFDF1E2BC9F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CenturyGothic-Bold cguidfix
/F1.1/CenturyGothic-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
4 w
1 J
1 j
0.60000002 i
/Cs1 SC
0.1854682 0 0.58296227 sc
q
0 0 1177 408 rc
1 0 0 -1 -160 453 cm
226.18611 181.54349 m
261.92111 181.54349 l
S
321.92239 181.54349 m
357.65741 181.54349 l
S
417.65869 181.54349 m
453.39371 181.54349 l
S
513.39496 181.54349 m
549.13 181.54349 l
S
605.37109 196.10156 m
648.62646 220.09938 l
S
700.74622 249.84749 m
739.47809 272.58139 l
S
700.74622 325.69537 m
739.47809 302.96146 l
S
605.37109 379.44128 m
648.62646 355.44348 l
S
513.39496 393.99936 m
549.13 393.99936 l
S
417.65869 393.99936 m
453.39371 393.99936 l
S
321.92239 393.99936 m
357.65741 393.99936 l
S
226.18611 393.99936 m
261.92111 393.99936 l
S
216.27048 371.71326 m
271.83673 310.05756 l
S
208.51402 366.64008 m
279.59317 208.90279 l
S
226.18611 287.77142 m
261.92111 287.77142 l
S
321.92239 287.77142 m
357.65741 287.77142 l
S
417.65869 287.77142 m
453.39371 287.77142 l
S
513.39496 287.77142 m
549.13 287.77142 l
S
594.58502 368.27734 m
659.41254 260.37949 l
S
605.37109 273.21335 m
648.62646 249.21553 l
S
594.58502 207.26552 m
659.41254 315.16336 l
S
605.37109 302.3295 m
648.62646 326.32733 l
S
503.47937 265.48532 m
559.04559 203.82961 l
S
495.7229 366.64008 m
566.80206 208.90279 l
S
559.04559 371.71326 m
503.47937 310.05756 l
S
566.80206 366.64008 m
495.7229 208.90279 l
S
407.74307 310.05756 m
463.30933 371.71326 l
S
399.9866 208.90279 m
471.06577 366.64008 l
S
407.74307 265.48532 m
463.30933 203.82961 l
S
399.9866 366.64008 m
471.06577 208.90279 l
S
312.00677 310.05756 m
367.57303 371.71326 l
S
304.25034 208.90279 m
375.32947 366.64008 l
S
312.00677 265.48532 m
367.57303 203.82961 l
S
304.25034 366.64008 m
375.32947 208.90279 l
S
216.27048 265.48532 m
271.83673 203.82961 l
S
271.83673 265.48532 m
216.27048 203.82961 l
S
279.59317 366.64008 m
208.51402 208.90279 l
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
57.399086 292.67014 m
69.115112 280.95416 69.115112 261.95886 57.399086 250.24289 c
45.683121 238.52686 26.687801 238.52686 14.971835 250.24289 c
3.2558093 261.95886 3.2558093 280.95416 14.971835 292.67014 c
26.687801 304.38617 45.683121 304.38617 57.399086 292.67014 c
f
1 w
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
217.39908 160.32986 m
229.11511 172.04582 229.11511 191.04115 217.39908 202.75711 c
205.68312 214.47314 186.68781 214.47314 174.97183 202.75711 c
163.25581 191.04115 163.25581 172.04582 174.97183 160.32986 c
186.68781 148.61383 205.68312 148.61383 217.39908 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
57.399086 186.4422 m
69.115112 174.72623 69.115112 155.73091 57.399086 144.01495 c
45.683121 132.29892 26.687801 132.29892 14.971835 144.01495 c
3.2558093 155.73091 3.2558093 174.72623 14.971835 186.4422 c
26.687801 198.15822 45.683121 198.15822 57.399086 186.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
217.39908 266.5578 m
229.11511 278.27377 229.11511 297.26907 217.39908 308.98505 c
205.68312 320.70108 186.68781 320.70108 174.97183 308.98505 c
163.25581 297.26907 163.25581 278.27377 174.97183 266.5578 c
186.68781 254.84178 205.68312 254.84178 217.39908 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
57.399086 80.214256 m
69.115112 68.498291 69.115112 49.502972 57.399086 37.787003 c
45.683121 26.070978 26.687801 26.070978 14.971835 37.787003 c
3.2558093 49.502972 3.2558093 68.498291 14.971835 80.214256 c
26.687801 91.930283 45.683121 91.930283 57.399086 80.214256 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
217.39908 372.78574 m
229.11511 384.50171 229.11511 403.49704 217.39908 415.21298 c
205.68312 426.92902 186.68781 426.92902 174.97183 415.21298 c
163.25581 403.49704 163.25581 384.50171 174.97183 372.78574 c
186.68781 361.06973 205.68312 361.06973 217.39908 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
153.13538 292.67014 m
164.85141 280.95416 164.85141 261.95886 153.13538 250.24289 c
141.41942 238.52686 122.4241 238.52686 110.70813 250.24289 c
98.992104 261.95886 98.992104 280.95416 110.70813 292.67014 c
122.4241 304.38617 141.41942 304.38617 153.13538 292.67014 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
313.13538 160.32986 m
324.85141 172.04582 324.85141 191.04115 313.13538 202.75711 c
301.4194 214.47314 282.4241 214.47314 270.70813 202.75711 c
258.9921 191.04115 258.9921 172.04582 270.70813 160.32986 c
282.4241 148.61383 301.4194 148.61383 313.13538 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
153.13538 186.4422 m
164.85141 174.72623 164.85141 155.73091 153.13538 144.01495 c
141.41942 132.29892 122.4241 132.29892 110.70813 144.01495 c
98.992104 155.73091 98.992104 174.72623 110.70813 186.4422 c
122.4241 198.15822 141.41942 198.15822 153.13538 186.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
313.13538 266.5578 m
324.85141 278.27377 324.85141 297.26907 313.13538 308.98505 c
301.4194 320.70108 282.4241 320.70108 270.70813 308.98505 c
258.9921 297.26907 258.9921 278.27377 270.70813 266.5578 c
282.4241 254.84178 301.4194 254.84178 313.13538 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
153.13538 80.214256 m
164.85141 68.498291 164.85141 49.502972 153.13538 37.787003 c
141.41942 26.070978 122.4241 26.070978 110.70813 37.787003 c
98.992104 49.502972 98.992104 68.498291 110.70813 80.214256 c
122.4241 91.930283 141.41942 91.930283 153.13538 80.214256 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
313.13538 372.78574 m
324.85141 384.50171 324.85141 403.49704 313.13538 415.21298 c
301.4194 426.92902 282.4241 426.92902 270.70813 415.21298 c
258.9921 403.49704 258.9921 384.50171 270.70813 372.78574 c
282.4241 361.06973 301.4194 361.06973 313.13538 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
248.87167 292.67014 m
260.58771 280.95416 260.58771 261.95886 248.87167 250.24289 c
237.1557 238.52686 218.16039 238.52686 206.44443 250.24289 c
194.72839 261.95886 194.72839 280.95416 206.44443 292.67014 c
218.16039 304.38617 237.1557 304.38617 248.87167 292.67014 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
408.87167 160.32986 m
420.58771 172.04582 420.58771 191.04115 408.87167 202.75711 c
397.1557 214.47314 378.1604 214.47314 366.44443 202.75711 c
354.72839 191.04115 354.72839 172.04582 366.44443 160.32986 c
378.1604 148.61383 397.1557 148.61383 408.87167 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
248.87167 186.4422 m
260.58771 174.72623 260.58771 155.73091 248.87167 144.01495 c
237.1557 132.29892 218.16039 132.29892 206.44443 144.01495 c
194.72839 155.73091 194.72839 174.72623 206.44443 186.4422 c
218.16039 198.15822 237.1557 198.15822 248.87167 186.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
408.87167 266.5578 m
420.58771 278.27377 420.58771 297.26907 408.87167 308.98505 c
397.1557 320.70108 378.1604 320.70108 366.44443 308.98505 c
354.72839 297.26907 354.72839 278.27377 366.44443 266.5578 c
378.1604 254.84178 397.1557 254.84178 408.87167 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
248.87167 80.214256 m
260.58771 68.498291 260.58771 49.502972 248.87167 37.787003 c
237.1557 26.070978 218.16039 26.070978 206.44443 37.787003 c
194.72839 49.502972 194.72839 68.498291 206.44443 80.214256 c
218.16039 91.930283 237.1557 91.930283 248.87167 80.214256 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
408.87167 372.78574 m
420.58771 384.50171 420.58771 403.49704 408.87167 415.21298 c
397.1557 426.92902 378.1604 426.92902 366.44443 415.21298 c
354.72839 403.49704 354.72839 384.50171 366.44443 372.78574 c
378.1604 361.06973 397.1557 361.06973 408.87167 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
344.60797 292.67014 m
356.32401 280.95416 356.32401 261.95886 344.60797 250.24289 c
332.892 238.52686 313.89667 238.52686 302.18073 250.24289 c
290.46469 261.95886 290.46469 280.95416 302.18073 292.67014 c
313.89667 304.38617 332.892 304.38617 344.60797 292.67014 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
504.60797 160.32986 m
516.32397 172.04582 516.32397 191.04115 504.60797 202.75711 c
492.892 214.47314 473.89667 214.47314 462.18073 202.75711 c
450.46469 191.04115 450.46469 172.04582 462.18073 160.32986 c
473.89667 148.61383 492.892 148.61383 504.60797 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
344.60797 186.4422 m
356.32401 174.72623 356.32401 155.73091 344.60797 144.01495 c
332.892 132.29892 313.89667 132.29892 302.18073 144.01495 c
290.46469 155.73091 290.46469 174.72623 302.18073 186.4422 c
313.89667 198.15822 332.892 198.15822 344.60797 186.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
504.60797 266.5578 m
516.32397 278.27377 516.32397 297.26907 504.60797 308.98505 c
492.892 320.70108 473.89667 320.70108 462.18073 308.98505 c
450.46469 297.26907 450.46469 278.27377 462.18073 266.5578 c
473.89667 254.84178 492.892 254.84178 504.60797 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
344.60797 80.214256 m
356.32401 68.498291 356.32401 49.502972 344.60797 37.787003 c
332.892 26.070978 313.89667 26.070978 302.18073 37.787003 c
290.46469 49.502972 290.46469 68.498291 302.18073 80.214256 c
313.89667 91.930283 332.892 91.930283 344.60797 80.214256 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
504.60797 372.78574 m
516.32397 384.50171 516.32397 403.49704 504.60797 415.21298 c
492.892 426.92902 473.89667 426.92902 462.18073 415.21298 c
450.46469 403.49704 450.46469 384.50171 462.18073 372.78574 c
473.89667 361.06973 492.892 361.06973 504.60797 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
440.34427 292.67014 m
452.06027 280.95416 452.06027 261.95886 440.34427 250.24289 c
428.6283 238.52686 409.63297 238.52686 397.91702 250.24289 c
386.20099 261.95886 386.20099 280.95416 397.91702 292.67014 c
409.63297 304.38617 428.6283 304.38617 440.34427 292.67014 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
600.34424 160.32986 m
612.0603 172.04582 612.0603 191.04115 600.34424 202.75711 c
588.6283 214.47314 569.633 214.47314 557.91699 202.75711 c
546.20099 191.04115 546.20099 172.04582 557.91699 160.32986 c
569.633 148.61383 588.6283 148.61383 600.34424 160.32986 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
440.34427 186.4422 m
452.06027 174.72623 452.06027 155.73091 440.34427 144.01495 c
428.6283 132.29892 409.63297 132.29892 397.91702 144.01495 c
386.20099 155.73091 386.20099 174.72623 397.91702 186.4422 c
409.63297 198.15822 428.6283 198.15822 440.34427 186.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
600.34424 266.5578 m
612.0603 278.27377 612.0603 297.26907 600.34424 308.98505 c
588.6283 320.70108 569.633 320.70108 557.91699 308.98505 c
546.20099 297.26907 546.20099 278.27377 557.91699 266.5578 c
569.633 254.84178 588.6283 254.84178 600.34424 266.5578 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
440.34427 80.214256 m
452.06027 68.498291 452.06027 49.502972 440.34427 37.787003 c
428.6283 26.070978 409.63297 26.070978 397.91702 37.787003 c
386.20099 49.502972 386.20099 68.498291 397.91702 80.214256 c
409.63297 91.930283 428.6283 91.930283 440.34427 80.214256 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
600.34424 372.78574 m
612.0603 384.50171 612.0603 403.49704 600.34424 415.21298 c
588.6283 426.92902 569.633 426.92902 557.91699 415.21298 c
546.20099 403.49704 546.20099 384.50171 557.91699 372.78574 c
569.633 361.06973 588.6283 361.06973 600.34424 372.78574 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
536.08057 239.55617 m
547.79657 227.84019 547.79657 208.84488 536.08057 197.12892 c
524.36456 185.41289 505.36926 185.41289 493.65329 197.12892 c
481.93729 208.84488 481.93729 227.84019 493.65329 239.55617 c
505.36926 251.27219 524.36456 251.27219 536.08057 239.55617 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
696.08057 213.44383 m
707.79657 225.15981 707.79657 244.15512 696.08057 255.87108 c
684.36456 267.5871 665.36926 267.5871 653.65332 255.87108 c
641.93726 244.15512 641.93726 225.15981 653.65332 213.44383 c
665.36926 201.72781 684.36456 201.72781 696.08057 213.44383 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
536.08057 133.32823 m
547.79657 121.61226 547.79657 102.61694 536.08057 90.900978 c
524.36456 79.184952 505.36926 79.184952 493.65329 90.900978 c
481.93729 102.61694 481.93729 121.61226 493.65329 133.32823 c
505.36926 145.04425 524.36456 145.04425 536.08057 133.32823 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
696.08057 319.67178 m
707.79657 331.38773 707.79657 350.38306 696.08057 362.09903 c
684.36456 373.81506 665.36926 373.81506 653.65332 362.09903 c
641.93726 350.38306 641.93726 331.38773 653.65332 319.67178 c
665.36926 307.95575 684.36456 307.95575 696.08057 319.67178 c
S
0 i
0.92429042 0.86820257 0.64427668 sc
CM
626.57104 186.4422 m
638.28705 174.72623 638.28705 155.73091 626.57104 144.01495 c
614.85504 132.29892 595.85974 132.29892 584.1438 144.01495 c
572.42773 155.73091 572.42773 174.72623 584.1438 186.4422 c
595.85974 198.15822 614.85504 198.15822 626.57104 186.4422 c
f
0.60000002 i
0.27781191 0 0.54327232 sc
1 0 0 -1 -160 453 cm
786.57104 266.5578 m
798.28705 278.27377 798.28705 297.26907 786.57104 308.98505 c
774.85504 320.70108 755.85974 320.70108 744.1438 308.98505 c
732.42773 297.26907 732.42773 278.27377 744.1438 266.5578 c
755.85974 254.84178 774.85504 254.84178 786.57104 266.5578 c
S
0 i
0.67017591 0.59128505 0.99087089 sc
CM
6.1848307 347.72986 m
6.1848307 352.27014 l
6.1848307 352.82245 6.6325459 353.27014 7.1848307 353.27014 c
418.70816 353.27014 l
419.26044 353.27014 419.70816 353.71786 419.70816 354.27014 c
419.70816 368.96295 l
419.70816 369.51523 420.15588 369.96295 420.70816 369.96295 c
420.92953 369.96295 421.14465 369.8895 421.31976 369.75409 c
445.84894 350.79114 l
446.28589 350.45337 446.36627 349.82532 446.02847 349.38837 c
445.9765 349.32114 445.91617 349.26083 445.84894 349.20886 c
421.31976 330.24591 l
420.88284 329.90811 420.25479 329.98849 419.91699 330.42545 c
419.78162 330.60059 419.70816 330.81567 419.70816 331.03705 c
419.70816 345.72986 l
419.70816 346.28214 419.26044 346.72986 418.70816 346.72986 c
7.1848307 346.72986 l
6.6325459 346.72986 6.1848307 347.17755 6.1848307 347.72986 c
h
6.1848307 347.72986 m
f
0.60000002 i
0.14821209 0 0.42149046 sc
1 0 0 -1 -160 453 cm
166.18483 105.27016 m
166.18483 100.72984 l
166.18483 100.17756 166.63255 99.729843 167.18483 99.729843 c
578.70813 99.729843 l
579.26044 99.729843 579.70813 99.282127 579.70813 98.729843 c
579.70813 84.037056 l
579.70813 83.484772 580.15588 83.037056 580.70813 83.037056 c
580.9295 83.037056 581.14465 83.110512 581.31976 83.245911 c
605.84894 102.20885 l
606.28589 102.54664 606.36627 103.17468 606.0285 103.61162 c
605.9765 103.67885 605.9162 103.73918 605.84894 103.79115 c
581.31976 122.75409 l
580.88281 123.09188 580.25482 123.01151 579.91699 122.57456 c
579.78162 122.39942 579.70813 122.18431 579.70813 121.96294 c
579.70813 107.27016 l
579.70813 106.71787 579.26044 106.27016 578.70813 106.27016 c
167.18483 106.27016 l
166.63255 106.27016 166.18483 105.82244 166.18483 105.27016 c
h
166.18483 105.27016 m
S
0.14619 0 0.37788999 sc
0 i
/F1.1[ 32 0 0 -32 0 0]sf
165 82 m
(!"#$%#&'\(%\)\))[ 8.953125 20.484375 10.234375 25.593750 21.125000 10.234375 21.125000 8.953125 21.125000 21.125000 14.078125 0.000000 ] xS
4 w
0.60000002 i
0.185468 0 0.58296198 sc
312.00677 371.71326 m
367.57303 310.05756 l
S
407.74307 371.71326 m
463.30933 310.05756 l
S
503.47937 371.71326 m
559.04559 310.05756 l
S
0.14619 0 0.37788999 sc
0 i
/F1.1[ 34 0 0 -34 0 0]sf
885 161.52174 m
(\(#*&+,-+".)[ 22.445312 10.874023 21.764648 22.445312 8.151367 21.764648 10.193359 8.151367 21.764648 0.000000 ] xS
/F1.1[ 32 0 0 -32 0 0]sf
885 233.06586 m
(\(#*&+,-+".'/%01*'2'34)[ 21.125000 10.234375 20.484375 21.125000 7.671875 20.484375 9.593750 7.671875 20.484375 19.203125 8.953125 17.921875 21.125000 7.671875 19.203125 20.484375 8.953125 19.203125 8.953125 17.921875 0.000000 ] xS
885 290.52173 m
(*5\(*,-*&'"1-\(1-'2'36)[ 20.484375 17.921875 21.125000 20.484375 20.484375 9.593750 20.484375 21.125000 8.953125 20.484375 19.203125 9.593750 21.125000 19.203125 9.593750 8.953125 19.203125 8.953125 17.921875 0.000000 ] xS
885 381.40652 m
(7##"#'2'*5\(*,-*&'8'\(#*&+,-+".)[ 16.640625 10.234375 10.234375 20.484375 10.234375 8.953125 19.203125 8.953125 20.484375 17.921875 21.125000 20.484375 20.484375 9.593750 20.484375 21.125000 8.953125 13.437500 8.953125 21.125000 10.234375 20.484375 21.125000 7.671875 20.484375 9.593750 7.671875 20.484375 0.000000 ] xS
885 440.02112 m
(2'36'8'34'2'84)[ 19.203125 8.953125 17.921875 17.921875 8.953125 13.437500 8.953125 17.921875 17.921875 8.953125 19.203125 8.953125 13.437500 0.000000 ] xS
ep
end
%%Trailer
%%EOF
