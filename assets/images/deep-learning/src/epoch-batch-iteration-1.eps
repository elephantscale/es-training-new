%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1101.000000 197.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G87) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1101 197
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1101 197
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CenturyGothic-Bold
%!FontType1-1.0: CenturyGothic-Bold 1.0000.2.3500
14 dict begin/FontName /CenturyGothic-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /seven put
dup 34 /eight put
dup 35 /one put
dup 36 /zero put
dup 37 /two put
dup 38 /three put
dup 39 /four put
dup 40 /five put
dup 41 /six put
dup 42 /nine put
dup 43 /b put
dup 44 /a put
dup 45 /t put
dup 46 /c put
dup 47 /h put
dup 48 /space put
dup 49 /parenleft put
dup 50 /l put
dup 51 /e put
dup 52 /f put
dup 53 /o put
dup 54 /v put
dup 55 /r put
dup 56 /parenright put
dup 57 /S put
dup 58 /i put
dup 59 /z put
dup 60 /equal put
dup 61 /B put
dup 62 /s put
dup 63 /I put
dup 64 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -235 1 index div -628 2 index div 2580 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<











00>] def
/CharStrings 34 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/zero 4 def
/one 5 def
/two 6 def
/three 7 def
/four 8 def
/five 9 def
/six 10 def
/seven 11 def
/eight 12 def
/nine 13 def
/equal 14 def
/B 15 def
/I 16 def
/S 17 def
/a 18 def
/b 19 def
/c 20 def
/e 21 def
/f 22 def
/h 23 def
/i 24 def
/l 25 def
/n 26 def
/o 27 def
/r 28 def
/s 29 def
/t 30 def
/v 31 def
/z 32 def
/currency 33 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-235 -628 2580 2297}def
/UniqueID 4104425 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9315F0017FC3864FF8D40C74661F4AC4F359AB40455CCBD4B88F0CECF691E280CF7D8A62C93CEE34BB50A941B7A69C73CB83FDE5BB5AC69CBC86D4E737EB9BCAFA5B246FDD210BE19D4D8CE8379A923354B95AA36F210DA7C80412B852D0AA29D662A4F1A4C4D925248D39881BC9F030477D996027CBB624ADA8DBD0EE34A8CDACFD1441166D77E9A942CE1C7CECBB6DFB2CC6737372D477F92C550C6504BAA6F69B99F114EED755167AD02365A376A7E4BA278C9EA38FD8C27A69C4BEEF6CED190EA9A35E79B0DBEC71AC15062BC6724585E0E1FD498CC4FB083EA1103746C76680CFE2BF63096576671F1F89F4A203649EBDD5A597198BC6E3C7886251B0AC5A6E2ADB00A8415D18E293DF13009C4A1188D25748E67417DD3CE1B3E40B47D89E865D01B6473BDB83BC87A4E8FD307C1DF5A249BB4410082164C7C63402A76FA15DF132D71E592AB4C0E11D101E092254C903619DBF8C7478C6BC2BF957190DD6589E0AEFA71C5FC8D63FB220AD7441990E069B38DA75F9159C30B01251CD17FF5E0D918D2E8AB5D55334A3E8C5E46020B672390A296CDA89655B7B6B80DF530B81C66F8D0E46EC782E2E8652C725D6D8EA692D1FBE93CDE2D9BC1A9BB18C5B375E2FF5B2CABC55E3668E2F4F428399BB0219A3247AAA125B8D4671531AE50B43658F8DBE3F6AEB56772F4DA066E8603D0C98D6C9C490FFC5733C3AA40105A8FCC7E37A0101FCAE255066089D811B085FDC0738ADD6F4285BD553EDBE7AF33591




C1D681F9B71864ABF3AAAF14AAA2B0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CenturyGothic-Bold cguidfix
/F1.1/CenturyGothic-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.67213225 0.59161448 1 sc
q
0 0 1101 197 rc
260.76416 196 m
343.20172 196 l
343.20172 141.84985 l
260.76416 141.84985 l
h
260.76416 196 m
f
1 J
1 j
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
282.76416 169 m
365.20172 169 l
365.20172 223.15015 l
282.76416 223.15015 l
h
282.76416 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
343.11285 196 m
425.55042 196 l
425.55042 141.84985 l
343.11285 141.84985 l
h
343.11285 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
365.11285 169 m
447.55042 169 l
447.55042 223.15015 l
365.11285 223.15015 l
h
365.11285 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
425.63837 196 m
508.07593 196 l
508.07593 141.84985 l
425.63837 141.84985 l
h
425.63837 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
447.63837 169 m
530.07593 169 l
530.07593 223.15015 l
447.63837 223.15015 l
h
447.63837 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
591.25421 196 m
673.69171 196 l
673.69171 141.84985 l
591.25421 141.84985 l
h
591.25421 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
613.25421 169 m
695.69171 169 l
695.69171 223.15015 l
613.25421 223.15015 l
h
613.25421 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
508.33633 196 m
590.77386 196 l
590.77386 141.84985 l
508.33633 141.84985 l
h
508.33633 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
530.3363 169 m
612.77386 169 l
612.77386 223.15015 l
530.3363 223.15015 l
h
530.3363 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
674.17206 196 m
756.60956 196 l
756.60956 141.84985 l
674.17206 141.84985 l
h
674.17206 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
696.17206 169 m
778.60956 169 l
778.60956 223.15015 l
696.17206 223.15015 l
h
696.17206 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
757.0899 196 m
839.52747 196 l
839.52747 141.84985 l
757.0899 141.84985 l
h
757.0899 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
779.0899 169 m
861.52747 169 l
861.52747 223.15015 l
779.0899 223.15015 l
h
779.0899 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
839.39551 196 m
921.83307 196 l
921.83307 141.84985 l
839.39551 141.84985 l
h
839.39551 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
861.39551 169 m
943.83307 169 l
943.83307 223.15015 l
861.39551 223.15015 l
h
861.39551 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
921.83307 196 m
1004.2706 196 l
1004.2706 141.84985 l
921.83307 141.84985 l
h
921.83307 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
943.83307 169 m
1026.2706 169 l
1026.2706 223.15015 l
943.83307 223.15015 l
h
943.83307 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
1004.2706 196 m
1086.7081 196 l
1086.7081 141.84985 l
1004.2706 141.84985 l
h
1004.2706 196 m
f
0.60000002 i
0.180457 0.00034799299 0.61368603 sc
1 0 0 -1 -22 365 cm
1026.2706 169 m
1108.7081 169 l
1108.7081 223.15015 l
1026.2706 223.15015 l
h
1026.2706 169 m
S
0 i
0.67213225 0.59161448 1 sc
CM
780.95709 190.25291 m
815.66028 190.25291 l
815.66028 147.59692 l
780.95709 147.59692 l
h
780.95709 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
/F1.1[ 35 0 0 -35 0 0]sf
810.50763 209.57507 m
(!)s
0.67213225 0.59161448 1 sc
CM
863.2627 190.25291 m
897.96588 190.25291 l
897.96588 147.59692 l
863.2627 147.59692 l
h
863.2627 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
892.81323 209.57507 m
(")s
0.67213225 0.59161448 1 sc
CM
1027.7087 188.32199 m
1063.27 188.32199 l
1063.27 149.52785 l
1027.7087 149.52785 l
h
1027.7087 188.32199 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
1047.8873 209.57507 m
(#$)[ 19.602051 0.000000 ] xS
0.67213225 0.59161448 1 sc
CM
284.63135 190.25291 m
319.33453 190.25291 l
319.33453 147.59692 l
284.63135 147.59692 l
h
284.63135 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
314.18192 209.57507 m
(#)s
0.67213225 0.59161448 1 sc
CM
366.98004 190.25291 m
401.68323 190.25291 l
401.68323 147.59692 l
366.98004 147.59692 l
h
366.98004 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
396.53061 209.57507 m
(%)s
0.67213225 0.59161448 1 sc
CM
449.50555 190.25291 m
484.20874 190.25291 l
484.20874 147.59692 l
449.50555 147.59692 l
h
449.50555 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
479.05612 209.57507 m
(&)s
0.67213225 0.59161448 1 sc
CM
532.20349 190.25291 m
566.90668 190.25291 l
566.90668 147.59692 l
532.20349 147.59692 l
h
532.20349 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
561.75409 209.57507 m
(')s
0.67213225 0.59161448 1 sc
CM
615.12134 190.25291 m
649.82452 190.25291 l
649.82452 147.59692 l
615.12134 147.59692 l
h
615.12134 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
644.67194 209.57507 m
(\()s
0.67213225 0.59161448 1 sc
CM
698.03925 190.25291 m
732.74237 190.25291 l
732.74237 147.59692 l
698.03925 147.59692 l
h
698.03925 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
727.58978 209.57507 m
(\))s
0.67213225 0.59161448 1 sc
CM
945.70026 190.25291 m
980.40344 190.25291 l
980.40344 147.59692 l
945.70026 147.59692 l
h
945.70026 190.25291 m
f
0.13503 0 0.54079002 sc
1 0 0 -1 -22 365 cm
975.25079 209.57507 m
(*)s
0.74414098 0.41720015 0.37933439 sc
CM
597.84058 113.86939 m
612.71973 119.30755 l
613.23846 119.49714 613.81268 119.23032 614.00226 118.71159 c
614.04248 118.60161 614.06305 118.48541 614.06305 118.36832 c
614.06305 116.00159 l
614.06305 115.44931 614.51074 115.00159 615.06305 115.00159 c
906.05737 115.00159 l
906.60962 115.00159 907.05737 115.44931 907.05737 116.00159 c
907.05737 118.36832 l
907.05737 118.9206 907.50507 119.36832 908.05737 119.36832 c
908.17444 119.36832 908.29065 119.34775 908.40063 119.30755 c
923.27979 113.86939 l
923.79852 113.67981 924.06537 113.10561 923.87579 112.58688 c
923.7746 112.31013 923.55658 112.09208 923.27979 111.99093 c
908.40063 106.55277 l
907.8819 106.36319 907.30768 106.63 907.1181 107.14874 c
907.07794 107.25872 907.05737 107.37491 907.05737 107.49201 c
907.05737 109.85873 l
907.05737 110.41101 906.60962 110.85873 906.05737 110.85873 c
615.06305 110.85873 l
614.51074 110.85873 614.06305 110.41101 614.06305 109.85873 c
614.06305 107.49201 l
614.06305 106.93973 613.6153 106.49201 613.06305 106.49201 c
612.94592 106.49201 612.82971 106.51258 612.71973 106.55277 c
597.84058 111.99093 l
597.32184 112.18051 597.05499 112.75471 597.24463 113.27344 c
597.34576 113.55019 597.56384 113.76825 597.84058 113.86939 c
h
597.84058 113.86939 m
f
0.60000002 i
0.179913 0 0.53210998 sc
1 0 0 -1 -22 365 cm
619.84058 251.1306 m
634.71973 245.69246 l
635.23846 245.50287 635.81268 245.76968 636.00226 246.28841 c
636.04248 246.39839 636.06305 246.51459 636.06305 246.63168 c
636.06305 248.99841 l
636.06305 249.55069 636.51074 249.99841 637.06305 249.99841 c
928.05737 249.99841 l
928.60962 249.99841 929.05737 249.55069 929.05737 248.99841 c
929.05737 246.63168 l
929.05737 246.07941 929.50507 245.63168 930.05737 245.63168 c
930.17444 245.63168 930.29065 245.65225 930.40063 245.69246 c
945.27979 251.1306 l
945.79852 251.32019 946.06537 251.89439 945.87579 252.41312 c
945.7746 252.68987 945.55658 252.90793 945.27979 253.00908 c
930.40063 258.44724 l
929.8819 258.63681 929.30768 258.37 929.1181 257.85126 c
929.07794 257.74127 929.05737 257.62509 929.05737 257.508 c
929.05737 255.14127 l
929.05737 254.58899 928.60962 254.14127 928.05737 254.14127 c
637.06305 254.14127 l
636.51074 254.14127 636.06305 254.58899 636.06305 255.14127 c
636.06305 257.508 l
636.06305 258.06027 635.6153 258.508 635.06305 258.508 c
634.94592 258.508 634.82971 258.48743 634.71973 258.44724 c
619.84058 253.00908 l
619.32184 252.81949 619.05499 252.24529 619.24463 251.72656 c
619.34576 251.44981 619.56384 251.23175 619.84058 251.1306 c
h
619.84058 251.1306 m
S
0 i
0.74414098 0.41720015 0.37933439 sc
CM
263.33398 113.86939 m
278.21317 119.30755 l
278.73187 119.49714 279.30609 119.23032 279.49567 118.71159 c
279.53586 118.60161 279.55643 118.48541 279.55643 118.36832 c
279.55643 116.00159 l
279.55643 115.44931 280.00415 115.00159 280.55643 115.00159 c
568.00958 115.00159 l
568.56183 115.00159 569.00958 115.44931 569.00958 116.00159 c
569.00958 118.36832 l
569.00958 118.9206 569.45728 119.36832 570.00958 119.36832 c
570.12665 119.36832 570.24286 119.34775 570.35284 119.30755 c
585.23206 113.86939 l
585.75079 113.67981 586.01758 113.10561 585.828 112.58688 c
585.72687 112.31013 585.50879 112.09208 585.23206 111.99093 c
570.35284 106.55277 l
569.83411 106.36319 569.25995 106.63 569.07031 107.14874 c
569.03015 107.25872 569.00958 107.37491 569.00958 107.49201 c
569.00958 109.85873 l
569.00958 110.41101 568.56183 110.85873 568.00958 110.85873 c
280.55643 110.85873 l
280.00415 110.85873 279.55643 110.41101 279.55643 109.85873 c
279.55643 107.49201 l
279.55643 106.93973 279.10873 106.49201 278.55643 106.49201 c
278.43933 106.49201 278.32315 106.51258 278.21317 106.55277 c
263.33398 111.99093 l
262.81525 112.18051 262.54843 112.75471 262.73801 113.27344 c
262.83917 113.55019 263.05722 113.76825 263.33398 113.86939 c
h
263.33398 113.86939 m
f
0.60000002 i
0.179913 0 0.53210998 sc
1 0 0 -1 -22 365 cm
285.33398 251.1306 m
300.21317 245.69246 l
300.73187 245.50287 301.30609 245.76968 301.49567 246.28841 c
301.53586 246.39839 301.55643 246.51459 301.55643 246.63168 c
301.55643 248.99841 l
301.55643 249.55069 302.00415 249.99841 302.55643 249.99841 c
590.00958 249.99841 l
590.56183 249.99841 591.00958 249.55069 591.00958 248.99841 c
591.00958 246.63168 l
591.00958 246.07941 591.45728 245.63168 592.00958 245.63168 c
592.12665 245.63168 592.24286 245.65225 592.35284 245.69246 c
607.23206 251.1306 l
607.75079 251.32019 608.01758 251.89439 607.828 252.41312 c
607.72687 252.68987 607.50879 252.90793 607.23206 253.00908 c
592.35284 258.44724 l
591.83411 258.63681 591.25995 258.37 591.07031 257.85126 c
591.03015 257.74127 591.00958 257.62509 591.00958 257.508 c
591.00958 255.14127 l
591.00958 254.58899 590.56183 254.14127 590.00958 254.14127 c
302.55643 254.14127 l
302.00415 254.14127 301.55643 254.58899 301.55643 255.14127 c
301.55643 257.508 l
301.55643 258.06027 301.10873 258.508 300.55643 258.508 c
300.43933 258.508 300.32315 258.48743 300.21317 258.44724 c
285.33398 253.00908 l
284.81525 252.81949 284.54843 252.24529 284.73801 251.72656 c
284.83917 251.44981 285.05722 251.23175 285.33398 251.1306 c
h
285.33398 251.1306 m
S
0 i
0.74414098 0.41720015 0.37933439 sc
CM
932.5434 113.86939 m
947.42261 119.30755 l
947.94128 119.49714 948.5155 119.23032 948.70508 118.71159 c
948.7453 118.60161 948.76587 118.48541 948.76587 118.36832 c
948.76587 116.00159 l
948.76587 115.44931 949.21356 115.00159 949.76587 115.00159 c
1077.9133 115.00159 l
1078.4656 115.00159 1078.9133 115.44931 1078.9133 116.00159 c
1078.9133 118.36832 l
1078.9133 118.9206 1079.3611 119.36832 1079.9133 119.36832 c
1080.0304 119.36832 1080.1466 119.34775 1080.2566 119.30755 c
1095.1357 113.86939 l
1095.6545 113.67981 1095.9214 113.10561 1095.7318 112.58688 c
1095.6306 112.31013 1095.4126 112.09208 1095.1357 111.99093 c
1080.2566 106.55277 l
1079.7379 106.36319 1079.1637 106.63 1078.9741 107.14874 c
1078.9338 107.25872 1078.9133 107.37491 1078.9133 107.49201 c
1078.9133 109.85873 l
1078.9133 110.41101 1078.4656 110.85873 1077.9133 110.85873 c
949.76587 110.85873 l
949.21356 110.85873 948.76587 110.41101 948.76587 109.85873 c
948.76587 107.49201 l
948.76587 106.93973 948.31818 106.49201 947.76587 106.49201 c
947.64874 106.49201 947.53259 106.51258 947.42261 106.55277 c
932.5434 111.99093 l
932.02466 112.18051 931.75787 112.75471 931.94745 113.27344 c
932.04858 113.55019 932.26666 113.76825 932.5434 113.86939 c
h
932.5434 113.86939 m
f
0.60000002 i
0.179913 0 0.53210998 sc
1 0 0 -1 -22 365 cm
954.5434 251.1306 m
969.42261 245.69246 l
969.94128 245.50287 970.5155 245.76968 970.70508 246.28841 c
970.7453 246.39839 970.76587 246.51459 970.76587 246.63168 c
970.76587 248.99841 l
970.76587 249.55069 971.21356 249.99841 971.76587 249.99841 c
1099.9133 249.99841 l
1100.4656 249.99841 1100.9133 249.55069 1100.9133 248.99841 c
1100.9133 246.63168 l
1100.9133 246.07941 1101.3611 245.63168 1101.9133 245.63168 c
1102.0304 245.63168 1102.1466 245.65225 1102.2566 245.69246 c
1117.1357 251.1306 l
1117.6545 251.32019 1117.9214 251.89439 1117.7318 252.41312 c
1117.6306 252.68987 1117.4126 252.90793 1117.1357 253.00908 c
1102.2566 258.44724 l
1101.7379 258.63681 1101.1637 258.37 1100.9741 257.85126 c
1100.9338 257.74127 1100.9133 257.62509 1100.9133 257.508 c
1100.9133 255.14127 l
1100.9133 254.58899 1100.4656 254.14127 1099.9133 254.14127 c
971.76587 254.14127 l
971.21356 254.14127 970.76587 254.58899 970.76587 255.14127 c
970.76587 257.508 l
970.76587 258.06027 970.31818 258.508 969.76587 258.508 c
969.64874 258.508 969.53259 258.48743 969.42261 258.44724 c
954.5434 253.00908 l
954.02466 252.81949 953.75787 252.24529 953.94745 251.72656 c
954.04858 251.44981 954.26666 251.23175 954.5434 251.1306 c
h
954.5434 251.1306 m
S
0.13503 0 0.54079002 sc
0 i
971.08618 308.70773 m
(+,-./0&)[ 23.105469 23.105469 10.493164 22.404785 21.003418 9.792480 0.000000 ] xS
954.30396 351.70773 m
(1234-056378)[ 13.295898 8.391113 22.404785 9.792480 10.493164 9.792480 22.404785 19.602051 22.404785 11.193848 0.000000 ] xS
0.41626 0.35183999 0.73395002 sc
27.499605 208 m
(9:;3<0#$)[ 18.200684 8.391113 16.098633 22.404785 21.003418 9.792480 19.602051 0.000000 ] xS
0.13503 0 0.54079002 sc
27.254732 261.68613 m
(=,-./0>:;30<0')[ 20.302734 23.105469 10.493164 22.404785 21.003418 9.792480 15.397949 8.391113 16.098633 22.404785 9.792480 21.003418 9.792480 0.000000 ] xS
27.50815 315.37225 m
(?-37,-:5@><0&)[ 9.792480 10.493164 22.404785 11.193848 23.105469 10.493164 8.391113 22.404785 21.003418 15.397949 21.003418 9.792480 0.000000 ] xS
717.80676 323.89038 m
(+,-./0%)[ 23.105469 23.105469 10.493164 22.404785 21.003418 9.792480 0.000000 ] xS
381.5296 323.89038 m
(+,-./0#)[ 23.105469 23.105469 10.493164 22.404785 21.003418 9.792480 0.000000 ] xS
ep
end
%%Trailer
%%EOF
