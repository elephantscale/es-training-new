%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 751.000000 422.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G5019) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 751 422
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 751 422
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CenturyGothic-Bold
%!FontType1-1.0: CenturyGothic-Bold 1.0000.2.3500
14 dict begin/FontName /CenturyGothic-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /Y put
dup 34 /A put
dup 35 /R put
dup 36 /N put
dup 37 /M put
dup 38 /E put
dup 39 /S put
dup 40 /O put
dup 41 /p put
dup 42 /a put
dup 43 /r put
dup 44 /k put
dup 45 /space put
dup 46 /C put
dup 47 /o put
dup 48 /e put
dup 49 /t put
dup 50 /n put
dup 51 /d put
dup 52 /l put
dup 53 /G put
dup 54 /h put
dup 55 /X put
dup 56 /L put
dup 57 /i put
dup 58 /b put
dup 59 /m put
dup 60 /g put
dup 61 /Q put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -235 1 index div -451 2 index div 2580 3 index div 2032 5 -1 roll div]cvx def
/sfnts [<

01120116011C0121012E01420151015A01600164017D01870195019601B101EB020A021F021F0224022702450267029002B002DA02DA02E602F4030903090322034203580363037A038E039803A103B303C503E403EB04170432045004510452046604780487048B04B004D504DD0500054E05500552058305C305DB05FC0609064406830690070C07C40818082309EB011201160111000000000000000000000000000000E202BE00CA00A701D40190001F0097009400C30098011C02410038004804FE051D01EF037A007E005E002203CD0072013C01A4018400C3005504D6012600F6005700FA0139013A007E01F101EF03FE0085011F011F009A007000C9006800E600FC0141005201F801B0011B00B302320112000105AD00C901B6079B017100F602110072009600000000004E00830033003700B400A900960120FF6D0499008E00C6FF0600CA04130178013C084CFFD506B800A902D5000001020000403B3C3B3A39383734333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B0042651582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B10B0A432343650A2D2C00B10A0B4323430B2D2C00B0462370B101463E01B0462370B10246453AB10200080D2D2C45B04A234445B04923442D2C2045B00325456164B050515845441B2121592D2CB00143632362B0002342B00F2B2D2C2045B0004360442D2C01B00643B00743650A2D2C2069B04061B0008B20B12CC08A8CB8100062602B0C642364615C58B00361592D2C45B0112BB0472344B0477AE4182D2CB801A65458B00943B801005458B9004AFF80B14980444459592D2CB01243588745B0112BB0472344B0477AE41B038A45186920B04723448A8A8720B0A05158B0112BB0472344B0477AE41B21B0477AE45959182D2C2D2C4B52582145441B23458C20B00325455258441B212159592D2C01182F2D2C20B0032545B049234445B04A23444565234520B00325606A20B009234223688A6A606120B01A8AB000527921B21A4A40B9FFE0004A45208A54582321B03F1B235961441CB114008A5279B34940204945208A54582321B03F1B235961442D2CB110114323430B2D2CB10E0F4323430B2D2CB10C0D4323430B2D2CB10C0D432343650B2D2CB10E




015D01211E01333237170E0123200035340033200011252E01232207060704CCFC9313A580996EE656F0A5FF00FEBE0141F201010142FEED1B9F697256362E01D174896B6C7A750143F3F90149FEB7FEF2A35B72402865000002005AFE5604BE045C001F002B006C401F17243624021226151F00200A182C20571C0700062657150A05C00BE00B020BB801B9B70E57060F121F8129B80149400B014A2D236718492C5A74182B4E10F44DED4E10F64DFDF43C003FEDED5D4358B2400E01005D593FED3F3FED01111239001112391112393130005D01211110070621222E0127211E0133323E01350E01232200351037363332161705220615141633323635342603AE01106F95FED4A0DA9624012D287E566E8637489E64DBFED2A091C95EA754FEE581A8AC827FA5A60440FC5CFEEC82B0509B6F2E2F446C84483F013CF201039D8E454F6BAD8388AEAA8A88AA000001008B0000044F05E40017003B40110205000010570507160B0A0C0B590A0A09B80217400B19011659001749187074182B4E10F43C4DFD3C10F63C10FD3C003F3C3FED3F113931301321113E013332171615112111342E0123220607061511218B010F50A253A26F5FFEF32457405377170CFEF105E4FDEE45457061BCFD3101DDBD86426E5F31AFFE4B0000020047000001A40600000B000F0071400EF905F9070206401C1E39FF060106B8021840100CFF000100010C060F0A4F115F110203BB0219000D0009021940230C0D0E590F0F800C900C02400C500C600C900CA00C05100C200C300C030C4910A274182B4E10F45D71723C4D10FD3C10E410E45D003F3F3F5D10EE712B3130005D13321615140623222635343603211121F548676647496766410112FEEE0600684A4967694B4866FE40FBC00001008C000004BE05E4000A0096405886079B060219060199039907D807032002740402040505610203140205060203050605040661070814070708080902030505030000040306090707060A2003200730070308070403020509064A0C010959000A490B70D8182B4E10F43C4DFD3C194E10E61217395D00183F3C103C3F3C3F1911392F1239123987054D2E182B087D10C487082E182B057D10C43130005D0171715D13211101210901210111218C011101920156FE2C020DFEADFE32FEEF05E4FC9B01C1FDF6FDCA01F5FE0B0001006D0000017E05E40003003D402A0000030A4F055F05020102590080039003024003500360039003A0030510032003300303034904A274182B4E10F45D71723C4DFD3C5D003F3F3130132111216D0111FEEF05E4FA1C000100880000070B045C0026008540290208001520570515570B0B05070006251B1B1A1A110A0028015F287F28021F282028020F1012115910B8021AB61B191A1C1B591AB8021A401C2601255926261000200040




00>] def
/CharStrings 31 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/C 3 def
/E 4 def
/G 5 def
/L 6 def
/M 7 def
/N 8 def
/O 9 def
/Q 10 def
/R 11 def
/S 12 def
/X 13 def
/Y 14 def
/a 15 def
/b 16 def
/d 17 def
/e 18 def
/g 19 def
/h 20 def
/i 21 def
/k 22 def
/l 23 def
/m 24 def
/n 25 def
/o 26 def
/p 27 def
/r 28 def
/t 29 def
/currency 30 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-235 -451 2580 2032}def
/UniqueID 4500918 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9310E889D4B294081CFBE92AFCC7FE3BB36C58496644FE561335DE14721EF6515215AC8431E215A3BD58F12E5B10A61FCD688BA91F61754F850085325B928C3F9A7E7457880B8027E59E59555869E44F5751D2C4C8D32923D53A09397F9CBEA3BF7EEECDBCCB8C84F3760DC5BD930B01D15989C9540FD07FED812A07B4F55395B0A99D895761CDFD4008DEA1A76ABD5CA335897030F24E7C88AA044298E2962B3F83D0A5D2813D2C56C1AB18B5F0CC6E2F1C4CD5AB94BC600B159CDF46934CA6DB33C5D6B0D46E0A6DFC948DF67C6519DB49A6C79BCB885BD2C8429E6958330D5926C412D875431F97F7E276FB7439A4DF76007D71747448AF0176A8F7193361BDD2D2D993EE8D275616102996166620CDF3E8E2069D2A63DD4A28E85EA882C7AD14624ED1A193872DEC9DF21418DAD278D0296713748D01A9707F02130FD1EA20A0497CD4027E47ED44A1920573E5A0A457CD62DF0406DC139C4636131EA20BE94AD8C902E1978E105CC8E17B5C57523C8A3FCDC08CEF3C6882D79F0FC3CF3BAFE59105026474A46E9AA6689BD61E17F91B93DEB664E8AF8C049809B5A9FF9B24FC76970FFE16A04E2FF28C31BEE0051E4FCB668AD73BDBC0645F664BE19D3CB2493D6A00E7582B4C98DF242BED063C7CDC9DE0FBEA2F0E3C7B4BD8CCB0F26DA715BFE0701A6BCEF7481945B25354959D5C9123C2CD8B68E46FCB6EECFE6BFF90C1695D592CE4B998A730624181A1BCE530C8191DC06423150C65595E2E3313A9
591FAF3C55FD934D4F72F86EBF6B9F1C94BE3C4FDB7D12D11DADFE994559EEC30DD39C7EE26D515DACA8DEC850C48758EC12EAFA74F01876473F83540F5BCEB7A02DAA726E39CBCF2B12E5592B031AF11EA992A0F9EA33C2F6BC6A39D48D423133A0831EB3FF197E7841E693AF4B3B87A60F01BE3B2D5D338335AAB3DBD12D0A8CE58CE69BB777C3EE3005517240A2FB03CA0CB5BEEFE1F763B30936C13F7353ADFA91755D28DE4EC5314ED8AAD105E979A86AF17B506F320AFE74D9F9992BF5754E3305AF230654238DEF7D4EA0AC75A01D119186C3D38D3C08C5CE9F2958ACCB593E020BB496EBDD8A518BAF255F5A653BAFD3B811AA51BA730ABE34111ADCD91AFE5AD0F6C759CCA333301DE0432D4949182BF4EADE7CAB716353CBEA251BF966457D3D83D5879F501E78640E3F0F081CCBFC8917799DB96F4602032F42A5F659835866A238DAFE16F452340FB804454A31FBAB66FF689689094E9425D0B64D822C358BC6F3F61BE992FF32D4DED6A2477087FBCBD0CE7827F9DC0ADAAF68328C4B8E3BBBF0B9E14C10E1B422D96ABC2B0A9A3296B2A4A60D7C2F8C603B69D4A23DA88BF58FE179DF84CA07BC0AE6191D4164D01762986D47FD213DD0B8DEA4C371FEBDAE1DB76D6263C15925A4001220DE3614DA142D652B9FDE1B2BB7F5E8209AA4A36FB35866735D15955564179BA930142F524E3A61DDDFC0C9BDB4EDEB3430D86761EE05925ECD5E10B5097C2B98D854042537CA97B674466F86B39A19992AED7306E25C775256754AA3DADBAB8428415566B271765F125EC14060D0F09E97BB2F4F068D1C1125971F5FB8BE88B1A7A6FE6F0DB0C545B5A654835C1789C0A423C61E784B81C192BA063F33956C78E8F68FF3A1B3F9B72766B22BCE3A61C36A4441ED1F9A0578D83D8393F4CC646CE7E31B3D0D1D542AB7B678CFF11C472F0126671D7B1B09285A902456B32703BDD47D9BAD804549E4EB909004BFE33FC3037C333E305F9F7A1D7AA519D74A17584E72F41A10E381F86B2DD25F8F21D3F0A4BDBF1AE471B2B558E0BD24845EBFA36D2D9F34BDF566850AEEBDB42135FA6AB2F3A118825F57B9867D2A69B64478098D518823F34E4BE54AA2BE589F2BA32CE914971565D165775088AF89E62E6F701CE822E3F7387B18F38898F6714A91D49D3F57F0E3F95108373B752E8C822D5ED3EDA2AFBDB38D0E4CF3D8DDCCFE422936A420C5DBE49CC49CCD757B06DF04E7E6FEBC3228C263FEDD88F3E20C166131E0D44A20B1C83BAB2A9EDD66D7AFAC99BD050661D6E3EE1D08D0139BCA52060BD2F7BCDEECC6BE2CA9EB99470BC0E7DB569818672926028ECBC7A3E360E4877E239E93485652D7EEB544AA0B19404D7E45C10E4BF15E13498350EF95C85A4780BC8EA98775C41E11E40C404A77BA0748D3855C396E0FD041D50868B3EF9E


BF249D081DBF4FFD89335AAB27B3F22BF9350E117BC9DE6EE34C9C7BA0DCE57981B0D51BCEB8FFEE68FD66926C23840B71C33DC215051974F0E3E92AB4624EDF725B95C1E3436928B7855CA7134FD0FB3C7FF08BD0FD4C6FDAB5DC88CD21530F0134B24E1402E1AA94CD6315684ED7CEE6477065E924289D3AE1319F9F277179CB277CE4698C7659DC6E24B9F38A5B8DDB2003137D99BB5856E593027CB6A3871FB0607325A4BD40C927FDCCFB3833D431508E3614F22CF3DFEEBA5A165F67798D7F466377036FE78DCDA3BCB18CE8691620E50090D8E4C6F709EC4DEAC7271289B8F97007EF2388DDA9C0C9A84E06347430C9728D7F0EEA644E010DDA451CA1EF03FDB1901CD1B1246907A9784F415D842F1739977F211A5F166B0091D1D6915E174023FE064751A9A69826C0D311032D22DC21E803FB1C1506BE7DC9F6C62B09E003CBB7C07328B359356267CBE21DA61C66E9AC7EE3CDB5EFB36937637D44BF7906B7D448C756A3BD72E3981B33F4AFA22986ECB33DEFAE88B297307AB9A7BE1BF056BB54676983FDDE3A81E18E06F7DF3D7D994E8C1718A89F4E9BB4129B604A80A4C229FEFBC7AF4D06B82FCE7FB1DEE9F4E5180887902E4AB766963EA1D94DE7ABFBF401D105F1F9A66194D8A25F72D0F90327208B3E5E4F21D594BDC6C52D7D913F3D832632CE46C7E843A389B0E6CB2C443F0C5C6A9FF46B59468DB8CB339FEC310AA1DB923431E350320B89551B206305DC3A1C9F6BCFE176F68566E0FFDD184F690660F6B393AAD087D51B6256C09DE3B22D87A62A03567CC98C4EAB5776556F80A90DBD7B39FDB842957AAFFA82D282DEDA556FD88A0FF581006274
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CenturyGothic-Bold cguidfix
/F1.1/CenturyGothic-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.9254902 0.86666667 0.64313728 sc
q
0 0 751 422 rc
8.5827999 244.11493 m
742.83118 244.11493 l
747.24945 244.11493 750.83118 240.5332 750.83118 236.11493 c
750.83118 136.29001 l
750.83118 131.87173 747.24945 128.29001 742.83118 128.29001 c
8.5827999 128.29001 l
4.1645217 128.29001 0.58279973 131.87173 0.58279973 136.29001 c
0.58279973 236.11493 l
0.58279973 240.5332 4.1645217 244.11493 8.5827999 244.11493 c
h
8.5827999 244.11493 m
f
0.67213225 0.59161448 1 sc
10.338273 389.86127 m
143.04547 389.86127 l
147.46375 389.86127 151.04547 386.27954 151.04547 381.86127 c
151.04547 282.03635 l
151.04547 277.61807 147.46375 274.03635 143.04547 274.03635 c
10.338273 274.03635 l
5.9199948 274.03635 2.3382728 277.61807 2.3382728 282.03635 c
2.3382728 381.86127 l
2.3382728 386.27954 5.9199948 389.86127 10.338273 389.86127 c
h
10.338273 389.86127 m
f
206.71248 389.86127 m
339.41968 389.86127 l
343.83795 389.86127 347.41968 386.27954 347.41968 381.86127 c
347.41968 282.03635 l
347.41968 277.61807 343.83795 274.03635 339.41968 274.03635 c
206.71248 274.03635 l
202.29419 274.03635 198.71248 277.61807 198.71248 282.03635 c
198.71248 381.86127 l
198.71248 386.27954 202.29419 389.86127 206.71248 389.86127 c
h
206.71248 389.86127 m
f
403.08667 389.86127 m
535.79388 389.86127 l
540.21216 389.86127 543.79388 386.27954 543.79388 381.86127 c
543.79388 282.03635 l
543.79388 277.61807 540.21216 274.03635 535.79388 274.03635 c
403.08667 274.03635 l
398.6684 274.03635 395.08667 277.61807 395.08667 282.03635 c
395.08667 381.86127 l
395.08667 386.27954 398.6684 389.86127 403.08667 389.86127 c
h
403.08667 389.86127 m
f
599.46088 389.86127 m
742.83118 389.86127 l
747.24945 389.86127 750.83118 386.27954 750.83118 381.86127 c
750.83118 282.03635 l
750.83118 277.61807 747.24945 274.03635 742.83118 274.03635 c
599.46088 274.03635 l
595.0426 274.03635 591.46088 277.61807 591.46088 282.03635 c
591.46088 381.86127 l
591.46088 386.27954 595.0426 389.86127 599.46088 389.86127 c
h
599.46088 389.86127 m
f
1 0.75 0.75 sc
14.676546 96.52076 m
178.04956 96.52076 l
182.46785 96.52076 186.04956 92.939034 186.04956 88.52076 c
186.04956 8 l
186.04956 3.581722 182.46785 0 178.04956 0 c
14.676546 0 l
10.258267 0 6.6765456 3.581722 6.6765456 8 c
6.6765456 88.52076 l
6.6765456 92.939034 10.258267 96.52076 14.676546 96.52076 c
h
14.676546 96.52076 m
f
0.62354612 0.93427497 0.93999404 sc
227.8692 96.52076 m
442.36536 96.52076 l
446.78363 96.52076 450.36536 92.939034 450.36536 88.52076 c
450.36536 8 l
450.36536 3.581722 446.78363 0 442.36536 0 c
227.8692 0 l
223.45093 0 219.8692 3.581722 219.8692 8 c
219.8692 88.52076 l
219.8692 92.939034 223.45093 96.52076 227.8692 96.52076 c
h
227.8692 96.52076 m
f
0.84804505 0.62136275 0.16929683 sc
496.52328 96.52076 m
742.83118 96.52076 l
747.24945 96.52076 750.83118 92.939034 750.83118 88.52076 c
750.83118 8 l
750.83118 3.581722 747.24945 0 742.83118 0 c
496.52328 0 l
492.10498 0 488.52328 3.581722 488.52328 8 c
488.52328 88.52076 l
488.52328 92.939034 492.10498 96.52076 496.52328 96.52076 c
h
496.52328 96.52076 m
f
4 w
1 J
1 j
0.60000002 i
0.42588899 0.019177902 0.15111934 sc
1 0 0 -1 -1290 728 cm
1833.6864 334.00537 m
1874.6917 368.29242 1874.6917 423.88266 1833.6864 458.16971 c
1792.6814 492.45691 1726.1992 492.45691 1685.1941 458.16971 c
1644.189 423.88266 1644.189 368.29242 1685.1941 334.00537 c
1726.1992 299.71817 1792.6814 299.71817 1833.6864 334.00537 c
S
0.16594 0 0.45526999 sc
0 i
/F1.1[ 30 0 0 -30 0 0]sf
1584.922 690.73962 m
(!"#$)[ 18.603516 22.192383 17.402344 0.000000 ] xS
1860.1802 690.73962 m
(%&'\(')[ 26.997070 15.600586 15.600586 25.195312 0.000000 ] xS
1584.7085 552.79755 m
('\)*+,-./+0)[ 15.600586 19.804688 19.804688 9.594727 17.402344 8.393555 23.393555 19.204102 9.594727 0.000000 ] xS
1303.5554 690.73962 m
('1*23*4/20)[ 15.600586 8.994141 19.804688 18.002930 19.804688 19.804688 7.192383 19.204102 18.002930 0.000000 ] xS
1904.7422 407.05118 m
(5+*\)67)[ 25.195312 9.594727 19.804688 19.804688 18.002930 0.000000 ] xS
1718.0511 407.05118 m
(%8-49:)[ 26.997070 13.198242 8.393555 7.192383 7.192383 0.000000 ] xS
1521.9625 384.34192 m
('\)*+,)[ 15.600586 19.804688 19.804688 9.594727 0.000000 ] xS
1489.8678 421.34192 m
('1+0*;92<)[ 15.600586 8.994141 9.594727 19.204102 19.804688 28.198242 7.192383 18.002930 0.000000 ] xS
1325.5884 389.05118 m
('\)*+,)[ 15.600586 19.804688 19.804688 9.594727 0.000000 ] xS
1339.6948 426.05118 m
('=8)[ 15.600586 25.195312 0.000000 ] xS
ep
end
%%Trailer
%%EOF
